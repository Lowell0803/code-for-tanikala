<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TANIKALA | Configuration</title>
    <link rel="stylesheet" href="admin/css/index-admin.css" />
    <link rel="stylesheet" href="admin/css/configuration.css" />
    <link rel="stylesheet" href="admin/css/sidebar.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link href="https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />

    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=upins:wght@400;700&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/boxicons/css/boxicons.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="components/notification.css" />
    <script type="module" src="components/notification.js"></script>

    <style>
      .period-info {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #ccc;
        background: #f9f9f9;
      }
      .period-info h3 {
        margin: 0 0 5px;
      }
    </style>
  </head>
  <body>
    <% function toPHFormat(dateString) { if (!dateString) return ''; return moment.tz(dateString, "Asia/Manila").format("YYYY-MM-DDTHH:mm"); } function formatDisplayDate(dateString) { if (!dateString) return ''; return moment.tz(dateString, "Asia/Manila").format("MM/DD/YYYY, hh:mm A"); } %>

    <header class="header" id="header">
      <div class="header-logo">
        <img src="../img/logo_tanikala.png" alt="Tanikala Logo" />
      </div>
      <div class="header-content">
        <h2>
          <span>electionName | Tanikala Voting System</span>
        </h2>

        <strong>
          Election Status:
          <span id="currentPeriodDisplay" class="election-status"> electionStatus </span>
          |
          <em id="currentPeriodName" class="right-text"> </em>
        </strong>

        <p><strong>Start Date:</strong></p>
        <p><strong>End Date:</strong></p>
      </div>
      <div class="header-user">
        <img src="<%= loggedInAdmin.img %>" alt="Admin Profile" />
        <div class="profile">
          <div class="admin-name"><%= loggedInAdmin.name %></div>
          <i> <span class="job"><%= loggedInAdmin.role %></span></i>
        </div>
        <div class="dropdown" onclick="toggleDropdown()"></div>
        <div class="dropdown-menu">
          <a href="/edit-account">View Account</a>
          <hr class="dropdown-line" />
          <a href="/logout">Log Out</a>
        </div>
      </div>
    </header>

    <div class="content">
      <div class="sidebar close">
        <div class="profile-details">
          <img src="<%= loggedInAdmin.img %>" />
          <span class="profile-name"><%= loggedInAdmin.name %></span>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>

        <ul class="nav-links">
          <hr />
          <li>
            <a href="#">
              <i class="bx bx-menu"></i>
              <span class="link_name">Menu</span>
            </a>
          </li>
          <hr />
          <li>
            <a href="/dashboard">
              <i class="bx bxs-dashboard"></i>
              <span class="link_name">Dashboard</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/dashboard">Dashboard</a></li>
            </ul>
          </li>

          <li id="active-tab">
            <a href="/configuration">
              <i class="fa fa-cogs"></i>
              <span class="link_name">Configuration</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/configuration">Configuration</a></li>
            </ul>
          </li>
          <li>
            <a href="/candidates">
              <i class="fa fa-users"></i>
              <span class="link_name">Candidates</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/candidates">Candidates</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/blockchain-management">
                <i class="fa fa-link"></i>
                <span class="link_name">Blockchain</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/blockchain-management">Blockchain</a></li>
              <li><a href="/blockchain-management">Blockchain Management</a></li>
              <li><a href="/blockchain-activity-log">Activity Log</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/voter-info">
                <i class="fa fa-bar-chart"></i>
                <span class="link_name">Election</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/voter-info"> electionName || "No Election Ongoing"</a></li>
              <li><a href="/voter-info">Voter Info</a></li>
              <li><a href="/voter-turnout">Voter Turnout</a></li>
              <li><a href="/vote-tally">Vote Tally</a></li>
              <li><a href="/results">Results</a></li>
              <li><a href="/reset">Reset Election</a></li>
            </ul>
          </li>

          <li>
            <a href="/archives">
              <i class="bx bx-archive"></i>
              <span class="link_name">Election Archives</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/archives">Election Archives</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/edit-account">
                <i class="fa fa-tasks"></i>
                <span class="link_name">System</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/edit-account">System</a></li>
              <li><a href="/edit-account">Edit Account</a></li>
              <li><a href="/manage-admins">Manage Admins</a></li>
              <li><a href="/help-page">Help Page</a></li>
              <li><a href="/system-activity-log">System Activity Log</a></li>
            </ul>
          </li>
        </ul>
      </div>
      <main class="main">
        <div class="title-container">
          <div class="r">
            <i class="fa fa-cogs"></i>
            <h1 class="title">Configuration</h1>
          </div>
        </div>
        <hr class="title-line" />
        <div class="first-main">
          <!-- Display Current Election Configuration -->

          <section class="election-info">
            <p class="election-name">&nbsp;<strong>Election Name:</strong> electionName</p>
            <hr />
            <p><i class="bx bx-calendar-check"></i>&nbsp;<strong>Status:</strong> electionStatus</p>
            <p>
              <i class="bx bx-edit-alt"></i>
              <strong>Registration Period:</strong>
              registrationStart to registrationEnd
            </p>
            <p>
              <i class="bx bx-list-ul"></i>
              <strong>Voting Period:</strong>
              votingStart to votingEnd
            </p>
          </section>
          <br />
          <!-- Election Creation / Update Form -->
          <section class="create-election">
            <h2>Create / Update Election</h2>
            <hr />
            <form action="/configuration" method="POST">
              <div>
                <label for="electionName">Election Name:</label>
                <input class="input" type="text" id="electionName" name="electionName" value="<%= electionConfig ? electionConfig.electionName : '' %>" required />
              </div>
              <div>
                <label for="registrationStart">Registration Start Date:</label>
                <input class="input" type="datetime-local" id="registrationStart" name="registrationStart" value="<%= electionConfig ? toPHFormat(electionConfig.registrationStart) : '' %>" required />
              </div>
              <div>
                <label for="registrationEnd">Registration End Date:</label>
                <input class="input" type="datetime-local" id="registrationEnd" name="registrationEnd" value="<%= electionConfig ? toPHFormat(electionConfig.registrationEnd) : '' %>" required />
              </div>
              <div>
                <label for="votingStart">Voting Start Date:</label>
                <input class="input" type="datetime-local" id="votingStart" name="votingStart" value="<%= electionConfig ? toPHFormat(electionConfig.votingStart) : '' %>" required />
              </div>
              <div>
                <label for="votingEnd">Voting End Date:</label>
                <input class="input" type="datetime-local" id="votingEnd" name="votingEnd" value="<%= electionConfig ? toPHFormat(electionConfig.votingEnd) : '' %>" required />
              </div>
              <div>
                <label for="partylists">Party List (comma separated):</label>
                <!-- Join the partylists array back to a comma separated string -->
                <input class="input" type="text" id="partylists" name="partylists" value="<%= electionConfig && electionConfig.partylists ? electionConfig.partylists.join(', ') : '' %>" required />
              </div>
              <fieldset>
                <legend><strong>Number of Students Per College</strong></legend>
                <% if(electionConfig && electionConfig.colleges) { %> <% electionConfig.colleges.forEach((college) => { %>
                <div class="num-of-students">
                  <div>
                    <img height="50" src="img/colleges/college-<%= college.acronym %>.png" alt="<%= college.name %>" />
                    <label for="college-<%= college.acronym %>"><%= college.name %> (<%= college.acronym %>): </label>
                  </div>
                  <input class="input" type="number" id="college-<%= college.acronym %>" name="colleges[<%= college.acronym %>]" value="<%= college.notRegisteredNotVoted %>" min="0" required />
                </div>
                <% }) %> <% } else { %>
                <!-- Fallback: in case there's no config, you can hard-code or leave it blank -->
                <p>No college data found.</p>
                <% } %>
              </fieldset>
              <button class="button button-save" type="submit">Save Election Configuration</button>
            </form>
            <form action="/reset-election" method="POST">
              <button type="submit" style="background-color: #000; color: #fff">Reset Election</button>
            </form>
          </section>

          <script>
            function resetTestDate() {
              const now = new Date();
              // Use toPHFormat to format the current date for the datetime-local input.
              const formattedNow = toPHFormat(now.toISOString());
              document.getElementById("testDatePicker").value = formattedNow;
              // Update the display using formatDisplayDate (which now shows both date and time).
              document.getElementById("currentFakeDateDisplay").innerText = "Current Fake Date: " + formatDisplayDate(now.toISOString());
              updateCurrentPeriod();
            }
          </script>
        </div>
      </main>
    </div>

    <footer class="footer">
      <div class="footer-left">
        <img src="img/calendar.png" class="footer-img" />
      </div>

      <div class="footer-center">
        <img src="img/copyright.png" class="footer-img" id="copyright-img" />
        <p>2025 - Fourmula 1</p>
      </div>

      <div class="footer-right">
        <img src="img/info.png" class="footer-img" id="info-img" />
        <p>Need help? Click&nbsp;</p>
        <a href="help_page">here.</a>
      </div>
    </footer>

    <script>
      function formatDate(isoString) {
        const date = new Date(isoString);
        const options = {
          month: "long",
          day: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        };
        return date.toLocaleString("en-US", options).toUpperCase();
      }

      function updateDateTime() {
        const datetimeElement = document.getElementById("datetime");
        if (!datetimeElement) return;

        // Get the initial time from the data attribute
        let currentTime = new Date(datetimeElement.getAttribute("data-date"));

        function update() {
          datetimeElement.textContent = formatDate(currentTime);
          currentTime.setMinutes(currentTime.getMinutes() + 1); // Increment by 1 minute
        }

        update(); // Set initial formatted date
        setInterval(update, 60000); // Update every minute (60000ms)
      }

      document.addEventListener("DOMContentLoaded", updateDateTime);
    </script>

    <script src="admin/js/sidebar.js"></script>
    <script src="admin/js/index_admin.js"></script>

    <script type="module">
      import { createNotification } from "/components/notification.js";

      document.addEventListener("DOMContentLoaded", () => {
        // Select the election configuration form
        const configForm = document.querySelector('form[action="/configuration"]');

        // Form submission event handler for validation
        configForm.addEventListener("submit", (e) => {
          e.preventDefault(); // Prevent the form from auto-submitting

          // Grab form input values
          const electionNameInput = document.getElementById("electionName");
          const electionName = electionNameInput.value.trim();

          // Validate election name length
          if (electionName.length < 8 || electionName.length > 60) {
            createNotification("Election name must be between 8 and 60 characters.", "error", 2000);
            return;
          }

          // Get date values from the datetime-local inputs
          const registrationStartInput = document.getElementById("registrationStart").value;
          const registrationEndInput = document.getElementById("registrationEnd").value;
          const votingStartInput = document.getElementById("votingStart").value;
          const votingEndInput = document.getElementById("votingEnd").value;

          // Ensure all date fields are provided
          if (!registrationStartInput || !registrationEndInput || !votingStartInput || !votingEndInput) {
            createNotification("All date fields must be filled.", "error", 2000);
            return;
          }

          // Convert inputs to Date objects
          const registrationStart = new Date(registrationStartInput);
          const registrationEnd = new Date(registrationEndInput);
          const votingStart = new Date(votingStartInput);
          const votingEnd = new Date(votingEndInput);
          const now = new Date();

          // Validate the order of dates: now < registrationStart < registrationEnd < votingStart < votingEnd
          if (!(now < registrationStart && registrationStart < registrationEnd && registrationEnd < votingStart && votingStart < votingEnd)) {
            createNotification("Please ensure that the current date is before registration start, which is before registration end, then voting start, and finally voting end.", "error", 2000);
            return;
          }

          // Validate and adjust the party list field
          const partylistsInput = document.getElementById("partylists");
          let partylistsValue = partylistsInput.value.trim();

          // If empty, default to "Independent"
          if (!partylistsValue) {
            partylistsValue = "Independent";
          } else if (!/Independent/i.test(partylistsValue)) {
            // If "Independent" isn't included (case-insensitive), append it.
            partylistsValue += ", Independent";
          }
          // Update the partylists field with the ensured value
          partylistsInput.value = partylistsValue;

          // All validations passed; submit the form
          configForm.submit();
        });
      });
    </script>

    <script type="module">
      import { createNotification } from "/components/notification.js";

      createNotification("Election configuration saved successfully!", "success", 2000);

      // Check if the URL contains ?saved in the query string
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has("saved")) {
        createNotification("Election configuration saved successfully!", "success", 2000);
        // Remove the query parameter so the notification doesn't appear again on refresh
        history.replaceState({}, document.title, window.location.pathname);
      }
    </script>
    <script src="admin/js/index-admin.js"></script>
    <script src="js/dropdown.js"></script>
  </body>
</html>
