<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>BulSU Voting System</title>

    <link rel="stylesheet" type="text/css" href="admin/css/index-admin.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/sidebar.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/dashboard.css" />

    <!-- Boxicons CDN Link -->
    <link href="https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=upins:wght@400;700&display=swap" rel="stylesheet" />
  </head>

  <body>
    <%- include('header') %>

    <div class="content">
      <%- include('sidebar', { activeTab: 'dashboard', activeSub: '' }) %>
      <main class="main">
        <div id="container-overlay">
          <div class="title-container">
            <div class="r">
              <i class="bx bxs-dashboard"></i>
              <h1 class="title">Dashboard</h1>
            </div>
          </div>
          <hr class="title-line" />
          <div class="quick-actions-container">
 <div class="quick-actions-buttons">
              <i class="fa-regular fa-address-card"></i>
              <p>Voter Information</p>
              <div class="view-export">
                <a href="voter_information.html">View</a>
                <span class="separator">|</span>
                <a href="export-voter-info">Export</a>
              </div>
            </div>

            <div class="quick-actions-buttons">
             <i class="fa fa-bar-chart" aria-hidden="true"></i>
              <p>Election Results</p>
              <div class="view-export">
                <a href="results.html">View</a>
                <span class="separator">|</span>
                <a href="export-election-results">Export</a>
              </div>
            </div>

            <div class="quick-actions-buttons">
              <i class="fas fa-list-ol"></i>
              <p>Vote Tally</p>
              <div class="view-export">
                <a href="candidates">View</a>
                <span class="separator">|</span>
                <a href="export-candidates">Export</a>
              </div>
            </div>

           
<div class="quick-actions-buttons">
             <i class="fa fa-users"></i>
              <p>Candidates</p>
              <div class="view-export">
                <a href="candidates">View</a>
                <span class="separator">|</span>
                <a href="export-candidates">Export</a>
              </div>
            </div>

            <div class="quick-actions-buttons">
              <i class="fa-solid fa-user-tie"></i>
              <p>Admin Accounts</p>
              <div class="view-export">
                <a href="manage-accounts.html">View</a>
                <span class="separator">|</span>
                <a href="export-admin-accounts">Export</a>
              </div>
            </div>
          </div>
            <div class="first-main">
              <div class="main-column">
                <div class="form" id="election-settings">
                  <p>
                    <b>Current Election Status: </b>
                  </p>
                  <br />
                  <div class="center">
                    <p id="electionStatusText"><!-- Status text will be updated here dynamically --></p>
                  </div>
                  <script>
                    // Reinitialize configuration variables with new names
                    const newConfig = <%- JSON.stringify(electionConfig || {}) %>;
                    const newUseRealTime = !(newConfig.useFakeDate && newConfig.fakeCurrentDate);
                  
                    // Pre-calculate time variables with new names
                    const newRegStart = newConfig.registrationStart ? moment.tz(newConfig.registrationStart, "Asia/Manila") : null;
                    const newRegEnd = newConfig.registrationEnd ? moment.tz(newConfig.registrationEnd, "Asia/Manila") : null;
                    const newVoteStart = newConfig.votingStart ? moment.tz(newConfig.votingStart, "Asia/Manila") : null;
                    const newVoteEnd = newConfig.votingEnd ? moment.tz(newConfig.votingEnd, "Asia/Manila") : null;
                    let newFakeCurrent = (newConfig.useFakeDate && newConfig.fakeCurrentDate)
                      ? moment.tz(newConfig.fakeCurrentDate, "Asia/Manila")
                      : moment.tz(new Date(), "Asia/Manila");
                  
                    function updateElectionStatusNew() {
                      // Determine current time: use real time if enabled, else newFakeCurrent
                      const currentTime = newUseRealTime ? moment.tz(new Date(), "Asia/Manila") : newFakeCurrent;
                      let statusText = newConfig.electionStatus || "";
                  
                      if (statusText === "ELECTION ACTIVE") {
                        if (newConfig.specialStatus && newConfig.specialStatus !== "None") {
                          statusText += ` | ${newConfig.specialStatus}`;
                        } else {
                          if (newRegStart && currentTime.isBefore(newRegStart)) {
                            statusText += " | Waiting for Registration Period";
                          } else if (newRegStart && newRegEnd && currentTime.isBetween(newRegStart, newRegEnd, null, '[)')) {
                            statusText += " | Registration Period";
                          } else if (newRegEnd && newVoteStart && currentTime.isBetween(newRegEnd, newVoteStart, null, '[)')) {
                            statusText += " | Waiting for Voting Period";
                          } else if (newVoteStart && newVoteEnd && currentTime.isBetween(newVoteStart, newVoteEnd, null, '[)')) {
                            statusText += " | Voting Period";
                          } else if (newVoteEnd && currentTime.isAfter(newVoteEnd)) {
                            statusText += " | Results Double Checking Period";
                          }
                        }
                      }
                  
                      document.getElementById("electionStatusText").innerHTML = statusText;
                    }
                  
                    // Initial update
                    updateElectionStatusNew();
                  
                    // Update every second
                    setInterval(() => {
                      if (!newUseRealTime) {
                        newFakeCurrent.add(1, 'seconds');
                      }
                      updateElectionStatusNew();
                    }, 1000);
                  </script>
                  

                  <br />
                  <div>
                    <% if (electionConfig.electionStatus === "Temporarily Closed") { %>
                    <form action="/resume-election" method="POST">
                      <button type="submit" style="background-color: #4caf50; color: #fff">Resume Election</button>
                    </form>
                    <% } else { %>
                    <form action="/temporarily-closed" method="POST">
                      <button type="submit" style="background-color: #f44336; color: #fff">Temporarily Close Election</button>
                    </form>
                    <% } %>
                  </div>
                </div>

                <div class="form" id="election-configuration">
                  <h3 class="center">Election Configurations</h3>
                  <br />
                  <% if (electionConfig.electionName) { %>
                  <p>
                    <b>Election Name:</b>
                    <span><%= electionConfig.electionName %></span>
                  </p>
                  <% } else { %>
                  <p><b>Election Name:</b> <span>Not set</span></p>
                  <% } %>
                  <br />

                  <p><b>Registration Period:</b></p>
                  <% if (electionConfig.registrationStart && electionConfig.registrationEnd) { %>
                  <p>
                    &nbsp;&nbsp;Start Date:
                    <span><%= new Date(electionConfig.registrationStart).toLocaleString() %></span>
                  </p>
                  <p>
                    &nbsp;&nbsp;End Date:
                    <span><%= new Date(electionConfig.registrationEnd).toLocaleString() %></span>
                  </p>
                  <% } else { %>
                  <p>Registration dates not set.</p>
                  <% } %>
                  <br />

                  <p><b>Voting Period:</b></p>
                  <% if (electionConfig.votingStart && electionConfig.votingEnd) { %>
                  <p>
                    &nbsp;&nbsp;Start Date:
                    <span><%= new Date(electionConfig.votingStart).toLocaleString() %></span>
                  </p>
                  <p>
                    &nbsp;&nbsp;End Date:
                    <span><%= new Date(electionConfig.votingEnd).toLocaleString() %></span>
                  </p>
                  <% } else { %>
                  <p>Voting dates not set.</p>
                  <% } %>
                  <br />

                  <% if (electionConfig.totalElections) { %>
                  <p><b>Total Number of Elections:</b> <span><%= electionConfig.totalElections %></span></p>
                  <% } %>
                  <br />

                  <% if (electionConfig.totalPartylists) { %>
                  <p><b>Total Number of Party Lists:</b> <span><%= electionConfig.totalPartylists %></span></p>
                  <% } else { %>
                  <p><b>Total Number of Party Lists:</b> <span><%= electionConfig.partylists ? electionConfig.partylists.length : 0 %></span></p>

                  <% } %> <% if (electionConfig.partylists && electionConfig.partylists.length > 0) { %>
                  <ul class="election-configuration">
                    <% electionConfig.partylists.forEach(function(party) { %>
                    <li><%= party %></li>
                    <% }); %>
                  </ul>
                  <% } else { %>
                  <p>No party lists available.</p>
                  <% } %>
                  <br />

                  <% if (electionConfig.totalCandidates) { %>
                    <p><b>Total Number of Candidates:</b> <span><%= electionConfig.totalCandidates %></span></p>

                  <% } else { %>
                  <p><b>Total Number of Candidates:</b> <span>0</span></p>
                  <% } %>
                  <br />

                  <% if (electionConfig.totalNumberOfStudents) { %>
                  <p><b>Total Number of Voters:</b> <span><%= electionConfig.totalNumberOfStudents %></span></p>
                  <% } else { %>
                  <p><b>Total Number of Voters:</b> <span>0</span></p>
                  <% } %>
                  <br />

                  <% if (electionConfig.colleges && electionConfig.colleges.length > 0) { %>
                    <p><b>List of Colleges and Their Number of Voters:</b></p>
                    <br />
                    <ol class="election-configuration">
                      <% 
                        let totalCollegeVoters = 0;
                        electionConfig.colleges.forEach(function(college) { 
                          totalCollegeVoters += college.numberOfStudents;
                      %>
                        <li>
                          <p>
                            <b><%= college.name %>:</b>
                            <span><%= college.numberOfStudents %> students</span>
                          </p>
                        </li>
                      <% }); %>
                    </ol>
                    <p><b>Total Number of Voters across Colleges:</b> <span><%= totalCollegeVoters %></span></p>
                  <% } else { %>
                    <p>No college data available.</p>
                  <% } %>
                  
                  <br />
                  <br />
                  <div class="center">
                    <a href="settings_election_management.html">Go to Election Management</a>
                  </div>
                </div>
              </div>

              <div class="right-side">
                <% 
                  // Determine candidate submission status based on the boolean value.
                  let candidateStatus = electionConfig.candidatesSubmitted ? "Submitted" : "Not Submitted";
                  
                  // Calculate the total number of registered voters from not voted and voted.
                  let registeredVotersCount = electionConfig.totalRegisteredNotVoted + electionConfig.totalRegisteredVoted;
                  // Calculate the percentage of registered voters relative to the total number of students.
                  let registeredVotersPercentage = electionConfig.totalNumberOfStudents > 0 ? 
                    (registeredVotersCount / electionConfig.totalNumberOfStudents * 100) : 0;
                  
                  // Calculate voter turnout percentage: voted students out of the total number of students.
                  let voterTurnoutPercentage = electionConfig.totalNumberOfStudents > 0 ? 
                    (electionConfig.totalVoted / electionConfig.totalNumberOfStudents * 100) : 0;
                %>
              
                <div class="beside">
                  <div class="form" id="candidate-submission">
                    <h4 class="center">Candidate Submission on Blockchain:</h4>
                    <p class="center"><%= candidateStatus %></p>
                  </div>
                  <div class="form" id="registered-students">
                    <h4 class="center">Registered Voters</h4>
                    <p class="center"><%= registeredVotersPercentage.toFixed(2) %>%</p>
                    <p class="center"><%= registeredVotersCount %> registered voters out of <%= electionConfig.totalNumberOfStudents %> total students</p>
                  </div>
                </div>
              
                <div class="beside">
                  <div class="form" id="vote-queue">
                    <h4 class="center">Current Vote Transactions Queue on Blockchain:</h4>
                    <p class="center" id="queue-number">0</p>
                  </div>
                  
                  <script src="/socket.io/socket.io.js"></script>
                  <script>
                    // Connect to the Socket.IO server.
                    const socket = io();
                  
                    // Listen for real-time updates to the vote queue.
                    socket.on('voteQueueUpdate', (data) => {
                      // Update the element with the new queue number.
                      document.getElementById('queue-number').innerText = data.queueNumber;
                    });
                  </script>
                  
                  <div class="form" id="voter-turnout">
                    <h4 class="center">Voter Turnout</h4>
                    <p class="center"><%= voterTurnoutPercentage.toFixed(2) %>%</p>
                    <p class="center"><%= electionConfig.totalVoted %> voted students out of <%= electionConfig.totalNumberOfStudents %> total students</p>
                  </div>
                </div>
              
                <div class="form" id="blockchain-dashboard">
                  <%
                  // Compute Live Fee Estimate per Vote Transaction using blockchainMgmt data.
                  let liveFeeEstimatePOL = 0, liveFeeEstimateUSD = 0, liveFeeEstimatePHP = 0;
                  if (blockchainMgmt && blockchainMgmt.voteTransactionsCount > 0) {
                    liveFeeEstimatePOL = blockchainMgmt.totalAmountSpentPol / blockchainMgmt.voteTransactionsCount;
                    liveFeeEstimateUSD = blockchainMgmt.totalAmountSpentUSD / blockchainMgmt.voteTransactionsCount;
                    liveFeeEstimatePHP = blockchainMgmt.totalAmountSpentPHP / blockchainMgmt.voteTransactionsCount;
                  }

                  // Compute Live Recommended Fund Estimate using electionConfig.totalNumberOfStudents.
                  let recommendedFundPOL = 0, recommendedFundUSD = 0, recommendedFundPHP = 0;
                  if (electionConfig && electionConfig.totalNumberOfStudents && blockchainMgmt && blockchainMgmt.voteTransactionsCount > 0) {
                    recommendedFundPOL = liveFeeEstimatePOL * electionConfig.totalNumberOfStudents;
                    recommendedFundUSD = liveFeeEstimateUSD * electionConfig.totalNumberOfStudents;
                    recommendedFundPHP = liveFeeEstimatePHP * electionConfig.totalNumberOfStudents;
                  }

                  // Determine the current balance status based on walletInfo.balancePOL relative to recommendedFundPOL.
                  let balanceStatus = "";
                  let balanceDescription = "";
                  if (walletInfo) {
                    if (walletInfo.balancePOL > recommendedFundPOL * 1.5) {
                      balanceStatus = "🔵 Excellent";
                      balanceDescription = "The admin wallet balance is well above the recommended fund estimate. You have more than enough funds to execute the blockchain voting operation confidently.";
                    } else if (walletInfo.balancePOL >= recommendedFundPOL) {
                      balanceStatus = "🟢 Good";
                      balanceDescription = "The admin wallet balance matches the recommended fund estimate. You are in a stable position to proceed with the blockchain voting operation.";
                    } else {
                      balanceStatus = "🟠 Warning";
                      balanceDescription = "The admin wallet balance is below the recommended fund estimate. Consider adding more funds to avoid potential issues during the blockchain voting operation.";
                    }
                  }
                %>
                  <h4 class="center">Admin Wallet Information:</h4>
                  <div class="indent">
                    <ul>
                      <li>
                        <p>
                          <strong>Wallet Address:</strong>
                          <%= walletInfo ? walletInfo.address : "N/A" %>
                        </p>
                      </li>
                      <br />
                      <li>
                        <p>
                          <strong>Current Balance:</strong>
                          <span><%= balanceStatus %></span>
                        </p>
                        <p><em><%= balanceDescription %></em></p>
                      </li>
                      <br />
                      <table class="currency">
                        <tr>
                          <!-- <th>Polygon (POL)</th>
                          <th>United States Dollar (USD)</th> -->
                          <th>Philippine Peso (PHP)</th>
                        </tr>
                        <tr>
                          <!-- <td><%= walletInfo ? walletInfo.balancePOL.toFixed(4) : "N/A" %> POL</td>
                          <td><%= walletInfo && walletInfo.balanceUSD ? walletInfo.balanceUSD.toFixed(2) : "N/A" %> USD</td> -->
                          <td><%= walletInfo && walletInfo.balancePHP ? walletInfo.balancePHP.toFixed(2) : "N/A" %> PHP</td>
                        </tr>
                      </table>
                      <br />
                      <li>
                        <p>
                          <strong>Blockchain Link:</strong>
                          <% if (blockchainInfo && blockchainInfo.transactionHash) { %>
                            <a href="https://amoy.polygonscan.com/tx/<%= blockchainInfo.transactionHash %>#eventlog" target="_blank">
                              View Transaction
                            </a>
                          <% } else { %>
                            N/A
                          <% } %>
                        </p>
                      </li>
                    </ul>
                  </div>
                  <hr />
                  <h4 class="center">Blockchain Transactions:</h4>
                  <div class="indent">
                    <ul>
                      <li>
                        <p>
                          <strong>Vote Transactions Count: </strong>
                          <span><%= blockchainMgmt ? blockchainMgmt.voteTransactionsCount : "N/A" %></span>
                        </p>
                      </li>
                      <br />
                      <li>
                        <!-- <p>
                          <strong>Total Blockchain Transactions: </strong>
                          <span>
                            <%= blockchainMgmt ? (blockchainMgmt.voteTransactionsCount + blockchainMgmt.candidateSubmissionsCount) : "N/A" %>
                          </span>
                        </p> -->
                        <div class="indent-ish">
                          <!-- <p>
                            <strong>Total Gas Used:</strong>
                            <%= blockchainMgmt ? blockchainMgmt.totalGasUsed : "N/A" %> Gas
                          </p>
                          <p>
                            <strong>Total Amount Spent (Wei):</strong>
                            <%= blockchainMgmt ? blockchainMgmt.totalWeiSpent : "N/A" %> Wei
                          </p> -->
                          <br />
                          <p><strong>Total Amount Spent:</strong></p>
                        </div>
                      </li>
                      <br />
                      <table class="currency">
                        <tr>
                          <th>Philippine Peso (PHP)</th>
                        </tr>
                        <tr>
                          <td>
                            <%= blockchainMgmt && blockchainMgmt.totalAmountSpentPHP !== undefined
                              ? blockchainMgmt.totalAmountSpentPHP.toFixed(2)
                              : "N/A" %> PHP
                          </td>
                        </tr>
                      </table>
                      <br />
                    </ul>
                  </div>
                </div>
              </div>
              
              
              
            </div>
        </div>
      </main>
    </div>

    <%- include('footer') %>

    <script src="admin/js/sidebar.js"></script>
    <script src="admin/js/index-admin.js"></script>
    <!-- <script>
      // Ensure currentPeriod exists to avoid errors
      if (!electionConfig.currentPeriod) {
        electionConfig.currentPeriod = { name: "N/A", duration: "N/A", waitingFor: null };
      }
      // Set current phase info in header
      document.getElementById("currentPeriodDisplay").innerText = electionConfig.currentPeriod.name;
      document.getElementById("currentPeriodDuration").innerText = electionConfig.currentPeriod.duration;
    </script> -->
    <script src="admin/js/index-admin.js"></script>
    <script src="js/dropdown.js"></script>
  </body>
</html>
