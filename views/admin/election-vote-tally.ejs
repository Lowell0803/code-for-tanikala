<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>BulSU Voting System</title>

    <link rel="stylesheet" type="text/css" href="admin/css/index-admin.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/sidebar.css" />

    <link rel="stylesheet" type="text/css" href="admin/css/vote-tally-lsc.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/vote-tally-scc.css" />

    <!-- Boxicons CDN Link -->
    <link href="https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />

    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=upins:wght@400;700&display=swap" rel="stylesheet" />
  </head>

  <body>
    <header class="header" id="header">
      <div class="header-logo">
        <img src="../img/logo_tanikala.png" alt="Tanikala Logo" />
      </div>
      <div class="header-content">
        <h2>
          <span><%= electionConfig.electionName || "Tanikala Voting System" %></span>
        </h2>

        <strong>
          Election Status:
          <span id="currentPeriodDisplay" class="election-status" data-status="<%= electionConfig.currentPeriod.name %>"> <%= electionConfig.currentPeriod.name %> </span>
          |
          <em id="currentPeriodName" class="right-text"> <%= electionConfig.currentPeriod.name %> </em>
        </strong>

        <script>
          document.addEventListener("DOMContentLoaded", function () {
            const periodDisplay = document.getElementById("currentPeriodDisplay");
            const periodName = document.getElementById("currentPeriodName");

            if (!periodDisplay || !periodName) return;

            // Get the election name from EJS
            let electionName = periodDisplay.getAttribute("data-status") || "";
            console.log(electionName);
            let placeholderText = "";
            let leftColor = "#f4ab2a"; // Default color for active periods

            if (electionName === "Election Not Active") {
              placeholderText = "ELECTION NOT ACTIVE | No Configuration";
              leftColor = "#004aad";
            } else if (electionName === "Results Are Out Period" || electionName === "Results Double Checking Period") {
              placeholderText = "ELECTION ENDED | " + electionName;
              leftColor = "#a60212";
            } else if (electionName === "Temporarily Closed") {
              placeholderText = "TEMPORARILY CLOSED";
              leftColor = "a60212";
            } else {
              placeholderText = "ELECTION ACTIVE | " + electionName;
              leftColor = "#5fb643  ";
            }

            if (electionName != "Temporarily Closed") {
              let parts = placeholderText.split(" | ");
              let leftText = parts[0];
              let rightText = parts.length > 1 ? parts[1] : "";

              // Update the UI
              periodDisplay.textContent = leftText;
              periodDisplay.style.color = leftColor;
              periodName.textContent = rightText;
            } else {
              preiodDisplay.style.color = leftColor;
            }
          });
        </script>

        <% let duration = electionConfig.currentPeriod.duration; let startDate = ""; let endDate = ""; if (duration.includes(" to ")) { [startDate, endDate] = duration.split(" to "); } else { startDate = duration; endDate = "(Waiting for Admin)"; } %>

        <p><strong>Start Date:</strong> <%= startDate %></p>
        <p><strong>End Date:</strong> <%= endDate %></p>
      </div>
      <div class="header-user">
        <img src="<%= loggedInAdmin.img %>" alt="Admin Profile" />
        <div class="admin-name"><%= loggedInAdmin.name %></div>
        <div class="dropdown" onclick="toggleDropdown()"></div>
        <div class="dropdown-menu">
          <a href="/edit-account">View Account</a>
          <hr class="dropdown-line" />
          <a href="/logout">Log Out</a>
        </div>
      </div>
    </header>

    <div class="content">
      <div class="sidebar close">
        <div class="profile-details">
          <img src="<%= loggedInAdmin.img %>" />
          <span class="profile-name"><%= loggedInAdmin.name %></span>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>

        <ul class="nav-links">
          <hr />
          <li>
            <a href="#">
              <i class="bx bx-menu"></i>
              <span class="link_name">Menu</span>
            </a>
          </li>
          <hr />
          <li>
            <a href="/dashboard">
              <i class="bx bxs-dashboard"></i>
              <span class="link_name">Dashboard</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/dashboard">Dashboard</a></li>
            </ul>
          </li>

          <li>
            <a href="/configuration">
              <i class="fa fa-cogs"></i>
              <span class="link_name">Configuration</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/configuration">Configuration</a></li>
            </ul>
          </li>
          <li>
            <a href="/candidates">
              <i class="fa fa-users"></i>
              <span class="link_name">Candidates</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/candidates">Candidates</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/blockchain-management">
                <i class="fa fa-link"></i>
                <span class="link_name">Blockchain</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/blockchain-management">Blockchain</a></li>
              <li><a href="/blockchain-management">Blockchain Management</a></li>
              <li><a href="/blockchain-activity-log">Activity Log</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/voter-info">
                <i class="fa fa-bar-chart"></i>
                <span class="link_name">Election</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/voter-info"><%= electionConfig.electionName || "No Election Ongoing" %></a></li>
              <li><a href="/voter-info">Voter Info</a></li>
              <li><a href="/voter-turnout">Voter Turnout</a></li>
              <li><a href="/vote-tally">Vote Tally</a></li>
              <li><a href="/results">Results</a></li>
              <li><a href="/reset">Reset Election</a></li>
            </ul>
          </li>

          <li>
            <a href="/archives">
              <i class="bx bx-archive"></i>
              <span class="link_name">Election Archives</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/archives">Election Archives</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/edit-account">
                <i class="fa fa-tasks"></i>
                <span class="link_name">System</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/edit-account">System</a></li>
              <li><a href="/edit-account">Edit Account</a></li>
              <li><a href="/manage-admins">Manage Admins</a></li>
              <li><a href="/help-page">Help Page</a></li>
              <li><a href="/system-activity-log">System Activity Log</a></li>
            </ul>
          </li>
        </ul>
      </div>
      <main class="main">
        <div class="main-left">
          Election Vote Tally
          <h1>Supreme Student Council</h1>
          <div class="container-ssc" id="container-president"></div>
          <div class="container-ssc" id="container-vice-president"></div>
          <div class="container-ssc" id="container-senator"></div>
          <!-- ðŸ”¥ Senators now included -->
        </div>

        <div class="main-right">
          <div class="main-right-header">
            <h1>Local Student Council</h1>
            <!-- <select class="select">
              <option value="cafa">College of Architecture and Fine Arts (CAFA)</option>
              <option value="cal">College of Arts and Letters (CAL)</option>
              <option value="cbea">College of Business Education and Accountancy (CBEA)</option>
            </select> -->
            <select name="college" id="college-selector">
              <option value="cafa">College of Architecture and Fine Arts (CAFA)</option>
              <option value="cal">College of Arts and Letters (CAL)</option>
              <option value="cbea">College of Business Education and Accountancy (CBEA)</option>
              <option value="ccje">College of Criminal Justice Education (CCJE)</option>
              <option value="chtm">College of Hospitality and Tourism Management (CHTM)</option>
              <option value="cict">College of Information and Communications Technology (CICT)</option>
              <option value="cit">College of Industrial Technology (CIT)</option>
              <option value="cn">College of Nursing (CN)</option>
              <option value="coe">College of Engineering (COE)</option>
              <option value="coed">College of Education (COED)</option>
              <option value="cs">College of Science (CS)</option>
              <option value="cser">College of Sports, Exercise, and Recreation (CSER)</option>
              <option value="cssp">College of Social Sciences and Philosophy (CSSP)</option>
            </select>
          </div>
          <div id="lsc-container">
            <div class="container-lsc" id="container-lsc-governor"></div>
            <div class="container-lsc" id="container-lsc-vice-governor"></div>
            <div class="container-lsc" id="container-lsc-board-member"></div>
          </div>
        </div>
      </main>
    </div>

    <footer class="footer">
      <div class="footer-left">
        <img src="img/calendar.png" class="footer-img" />
        <p id="datetime" data-date="<%= electionConfig.fakeCurrentDate %>"></p>
      </div>

      <div class="footer-center">
        <img src="img/copyright.png" class="footer-img" id="copyright-img" />
        <p>2025 - Fourmula 1</p>
      </div>

      <div class="footer-right">
        <img src="img/info.png" class="footer-img" id="info-img" />
        <p>Need help? Click&nbsp;</p>
        <a href="help_page">here.</a>
      </div>
    </footer>

    <!-- Include your JS files including liner-bar-js -->
    <script src="/path/to/liner-bar.js"></script>
    <script src="admin/js/sidebar.js"></script>
    <script>
      // When the DOM is fully loaded, fetch the vote counts
      document.addEventListener("DOMContentLoaded", function () {
        fetch("/developer/vote-counts")
          .then((response) => response.json())
          .then((data) => {
            if (!data.success) return;
            let results = data.results;
            // Prepare two groups:
            // Left group: SSC positions (exact match on "President", "Vice President", "Senator")
            let leftData = {
              President: [],
              "Vice President": [],
              Senator: [],
            };
            // Right group: LSC positions that include a hyphen: e.g. "Governor - CAL"
            // We will group these by the title and college code (converted to lowercase for consistency)
            let rightData = {
              Governor: {},
              "Vice Governor": {},
              "Board Member": {},
            };

            results.forEach((candidate) => {
              let pos = candidate.position;
              // Check for SSC positions
              if (pos === "President" || pos === "Vice President" || pos === "Senator") {
                leftData[pos].push(candidate);
              } else if (pos.includes("Governor") || pos.includes("Vice Governor") || pos.includes("Board Member")) {
                // Expect format: "Title - CollegeCode" (for Governor and Vice Governor)
                // or "Board Member - [Program Name]" which we'll assume also contains a college identifier
                let parts = pos.split(" - ");
                if (parts.length > 1) {
                  let title = parts[0].trim();
                  let collegeKey = parts[1].trim().toLowerCase();
                  // Initialize grouping for this title and college if not present
                  if (!rightData[title][collegeKey]) {
                    rightData[title][collegeKey] = [];
                  }
                  rightData[title][collegeKey].push(candidate);
                }
              }
            });

            // Render SSC positions (left side)
            renderCandidates("container-president", leftData["President"], "President");
            renderCandidates("container-vice-president", leftData["Vice President"], "Vice President");
            renderCandidates("container-senator", leftData["Senator"], "Senator");

            // Render LSC positions (right side) based on the currently selected college
            let collegeSelect = document.getElementById("college-selector");
            function renderRight() {
              let selectedCollege = collegeSelect.value.toLowerCase();
              renderCandidates("container-lsc-governor", rightData["Governor"][selectedCollege] || [], "Governor");
              renderCandidates("container-lsc-vice-governor", rightData["Vice Governor"][selectedCollege] || [], "Vice Governor");
              renderCandidates("container-lsc-board-member", rightData["Board Member"][selectedCollege] || [], "Board Member");
            }
            collegeSelect.addEventListener("change", renderRight);
            renderRight();

            // If liner-bar-js provides a function to create a bar chart for a candidate,
            // you could call that function inside renderCandidates() to display vote counts graphically.
          })
          .catch((error) => console.error("Error fetching vote counts:", error));

        // Utility function to render candidate cards into a container.
        // You can adjust the innerHTML and CSS classes to match your liner-bar styling.
        function renderCandidates(containerId, candidates, positionTitle) {
          let container = document.getElementById(containerId);
          container.innerHTML = "";
          if (candidates.length === 0) {
            container.innerHTML = `<p>No candidates for ${positionTitle}</p>`;
            return;
          }
          candidates.forEach((candidate) => {
            let card = document.createElement("div");
            card.className = "candidate-card liner-bar"; // Use a class from liner-bar-css if available
            card.innerHTML = `
              <div class="candidate-name">${candidate.candidate}</div>
              <div class="candidate-votes">${candidate.votes} votes</div>
            `;
            container.appendChild(card);
            // Optionally, if liner-bar-js exposes a function (e.g. createLinerBar) to display a bar,
            // you could call it here passing the candidate.votes and a reference to the card element.
            // Example:
            // linerBar.createLinerBar(card, candidate.votes);
          });
        }
      });
    </script>

    <script>
      function formatDate(isoString) {
        const date = new Date(isoString);
        const options = {
          month: "long",
          day: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        };
        return date.toLocaleString("en-US", options).replace(",", " -").toUpperCase();
      }

      function updateDateTime() {
        const datetimeElement = document.getElementById("datetime");
        if (!datetimeElement) return;

        // Get the initial time from the data attribute
        let currentTime = new Date(datetimeElement.getAttribute("data-date"));

        function update() {
          datetimeElement.textContent = formatDate(currentTime);
          currentTime.setMinutes(currentTime.getMinutes() + 1); // Increment by 1 minute
        }

        update(); // Set initial formatted date
        setInterval(update, 60000); // Update every minute (60000ms)
      }

      document.addEventListener("DOMContentLoaded", updateDateTime);
    </script>

    <script src="admin/js/sidebar.js"></script>
    <script src="admin/js/index_admin.js"></script>
    <script src="admin/js/vote-tally-ssc.js"></script>
    <script src="admin/js/vote-tally-lsc.js"></script>
  </body>
</html>
