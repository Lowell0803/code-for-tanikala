<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>BulSU Voting System</title>

    <link rel="stylesheet" type="text/css" href="admin/css/index-admin.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/sidebar.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/candidates.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/vote-tally.css" />

    <link rel="stylesheet" type="text/css" href="admin/css/index-election.css" />
    <!-- <link rel="stylesheet" type="text/css" href="admin/css/sample/vote-tally.css" /> -->

    <link rel="stylesheet" type="text/css" href="admin/css/voter-id-form.css" />

    <link rel="stylesheet" type="text/css" href="admin/dependencies/progress-bar.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link href="https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=upins:wght@400;700&display=swap" rel="stylesheet" />

    <style></style>
  </head>

  <body>
    <header class="header" id="header">
      <div class="header-logo">
        <img src="../img/logo_tanikala.png" alt="Tanikala Logo" />
      </div>
      <div class="header-content">
        <h2>
          <span><%= electionConfig.electionName || "Tanikala Voting System" %></span>
        </h2>

        <strong>
          Election Status:
          <span id="currentPeriodDisplay" class="election-status" data-status="<%= electionConfig.currentPeriod.name %>"> <%= electionConfig.currentPeriod.name %> </span>
          |
          <em id="currentPeriodName" class="right-text"> <%= electionConfig.currentPeriod.name %> </em>
        </strong>

        <script>
          document.addEventListener("DOMContentLoaded", function () {
            const periodDisplay = document.getElementById("currentPeriodDisplay");
            const periodName = document.getElementById("currentPeriodName");

            if (!periodDisplay || !periodName) return;

            // Get the election name from EJS
            let electionName = periodDisplay.getAttribute("data-status") || "";
            console.log(electionName);
            let placeholderText = "";
            let leftColor = "#f4ab2a"; // Default color for active periods

            if (electionName === "Election Not Active") {
              placeholderText = "ELECTION NOT ACTIVE | No Configuration";
              leftColor = "#004aad";
            } else if (electionName === "Results Are Out Period" || electionName === "Results Double Checking Period") {
              placeholderText = "ELECTION ENDED | " + electionName;
              leftColor = "#a60212";
            } else if (electionName === "Temporarily Closed") {
              placeholderText = "TEMPORARILY CLOSED";
              leftColor = "a60212";
            } else {
              placeholderText = "ELECTION ACTIVE | " + electionName;
              leftColor = "#5fb643  ";
            }

            if (electionName != "Temporarily Closed") {
              let parts = placeholderText.split(" | ");
              let leftText = parts[0];
              let rightText = parts.length > 1 ? parts[1] : "";

              // Update the UI
              periodDisplay.textContent = leftText;
              periodDisplay.style.color = leftColor;
              periodName.textContent = rightText;
            } else {
              preiodDisplay.style.color = leftColor;
            }
          });
        </script>

        <% let duration = electionConfig.currentPeriod.duration; let startDate = ""; let endDate = ""; if (duration.includes(" to ")) { [startDate, endDate] = duration.split(" to "); } else { startDate = duration; endDate = "(Waiting for Admin)"; } %>

        <p><strong>Start Date:</strong> <%= startDate %></p>
        <p><strong>End Date:</strong> <%= endDate %></p>
      </div>
      <div class="header-user">
        <img src="<%= loggedInAdmin.img %>" alt="Admin Profile" />
        <div class="profile">
          <div class="admin-name"><%= loggedInAdmin.name %></div>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>
        <div class="dropdown" onclick="toggleDropdown()"></div>
        <div class="dropdown-menu">
          <a href="/edit-account">View Account</a>
          <hr class="dropdown-line" />
          <a href="/logout">Log Out</a>
        </div>
      </div>
    </header>

    <div class="content">
      <div class="sidebar close">
        <div class="profile-details">
          <img src="<%= loggedInAdmin.img %>" />
          <span class="profile-name"><%= loggedInAdmin.name %></span>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>

        <ul class="nav-links">
          <hr />
          <li>
            <a href="#">
              <i class="bx bx-menu"></i>
              <span class="link_name">Menu</span>
            </a>
          </li>
          <hr />
          <li>
            <a href="/dashboard">
              <i class="bx bxs-dashboard"></i>
              <span class="link_name">Dashboard</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/dashboard">Dashboard</a></li>
            </ul>
          </li>

          <li>
            <a href="/configuration">
              <i class="fa fa-cogs"></i>
              <span class="link_name">Configuration</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/configuration">Configuration</a></li>
            </ul>
          </li>
          <li>
            <a href="/candidates">
              <i class="fa fa-users"></i>
              <span class="link_name">Candidates</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/candidates">Candidates</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/blockchain-management">
                <i class="fa fa-link"></i>
                <span class="link_name">Blockchain</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/blockchain-management">Blockchain</a></li>
              <li><a href="/blockchain-management">Blockchain Management</a></li>
              <li><a href="/blockchain-activity-log">Activity Log</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link" id="active-tab">
              <a href="/voter-info">
                <i class="fa fa-bar-chart"></i>
                <span class="link_name">Election</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/voter-info"><%= electionConfig.electionName || "No Election Ongoing" %></a></li>
              <li><a href="/voter-info">Voter Info</a></li>
              <li><a href="/voter-turnout">Voter Turnout</a></li>
              <li><a href="/vote-tally" id="active-sub">Vote Tally</a></li>
              <li><a href="/results">Results</a></li>
              <li><a href="/reset">Reset Election</a></li>
            </ul>
          </li>

          <li>
            <a href="/archives">
              <i class="bx bx-archive"></i>
              <span class="link_name">Election Archives</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/archives">Election Archives</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/edit-account">
                <i class="fa fa-tasks"></i>
                <span class="link_name">System</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/edit-account">System</a></li>
              <li><a href="/edit-account">Edit Account</a></li>
              <li><a href="/manage-admins">Manage Admins</a></li>
              <li><a href="/help-page">Help Page</a></li>
              <li><a href="/system-activity-log">System Activity Log</a></li>
            </ul>
          </li>
        </ul>
      </div>

      <main class="main">
        <div class="title-container">
          <div class="r">
            <i class="fas fa-list-ol"></i>
            <h1 class="title">Vote Tally</h1>
          </div>
        </div>
        <hr class="title-line" />

        <%- include('shared-vote-tally') %>
      </main>
    </div>

    <script>
      document.querySelectorAll(".votes").forEach((button) => {
        button.addEventListener("click", async function (event) {
          event.preventDefault();
          const uniqueId = this.dataset.uniqueid;
          const candidateName = this.dataset.name;
          console.log("Unique ID clicked:", uniqueId); // Debug log
          if (!uniqueId) {
            console.error("Unique ID not found for candidate");
            return;
          }
          try {
            const response = await fetch(`/api/voter-ids/${uniqueId}`);
            console.log("API response status:", response.status); // Debug log
            const data = await response.json();
            console.log("Data fetched:", data); // Debug log

            // Set the title to include candidate name
            document.querySelector(".hashes-title").textContent = `List of Voter IDs for ${candidateName}`;

            // If candidate is not found, display an empty list in the modal
            if (data.error) {
              allHashes.length = 0;
              render(); // Re-render the hashes grid (will be empty)
              document.querySelector("#totalVotes").textContent = allHashes.length;
              return;
            }

            // Update allHashes with real voter IDs and re-render the modal
            allHashes.length = 0;
            allHashes.push(...data.emails);
            render(); // Re-render the hashes grid
            document.querySelector("#totalVotes").textContent = allHashes.length;
          } catch (error) {
            console.error("Error fetching voter IDs:", error);
          }
        });
      });
    </script>

    <!-- sample voter ids form -->
    <!-- Modal wrapper -->
    <div class="hashes-container modal">
      <span class="close-modal">&times;</span>
      <h2 class="hashes-title">List of Transaction Hashes for "John Doe"</h2>
      <div class="top-bar">
        <strong>
          <p class="total-votes">Total Votes: <span id="totalVotes"></span></p>
        </strong>
        <div class="search-bar">
          <input type="text" id="searchInput" placeholder="Search..." />
          <button id="searchBtn">
            <i class="fa fa-search"></i>
          </button>
        </div>
      </div>

      <div class="hashes-grid" id="hashesGrid">
        <!-- The 3-column listing of transaction hashes goes here -->
      </div>

      <div class="pagination">
        <button id="prevBtn">&lt;</button>
        <span id="pageInfo">Page 1 of 1</span>
        <button id="nextBtn">&gt;</button>
      </div>
    </div>

    <script>
      // Get the modal element (which is now the .hashes-container)
      const modal = document.querySelector(".hashes-container.modal");
      // Get the close button inside the modal
      const closeBtn = document.querySelector(".close-modal");

      // Toggle modal display when any .votes button is clicked
      document.querySelectorAll(".votes").forEach((button) => {
        button.addEventListener("click", function (event) {
          event.preventDefault();
          // You can call your fetch function here if needed.
          // For popup functionality, we just toggle the modal.
          modal.style.display = "block";
        });
      });

      // Close the modal when the close button is clicked
      closeBtn.addEventListener("click", () => {
        modal.style.display = "none";
      });

      // Optional: Close modal when clicking outside modal content (if needed)
      // Note: if the entire .hashes-container is the modal, clicking anywhere inside will close it.
      // You might want to add an inner wrapper if that behavior isn't desired.
      window.addEventListener("click", function (event) {
        if (event.target === modal) {
          modal.style.display = "none";
        }
      });
    </script>

    <script>
      /***************************************************
       * 1. SAMPLE DATA
       ***************************************************/
      const allHashes = [];
      // for (let i = 1; i <= 390; i++) {
      //   // Example hash text
      //   const randomHash = Math.random().toString(36).substring(2, 15);
      //   allHashes.push(`${i}. ${randomHash}${randomHash}`);
      // }

      // For demonstration, let's say total votes is 1500:
      const totalVotes = 1500;

      /***************************************************
       * 2. PAGINATION & STATE
       ***************************************************/
      // We want 90 items per page (30 items per column * 3 columns).
      const itemsPerPage = 90;
      let currentPage = 1;
      let searchQuery = ""; // We'll store the user query, for highlighting

      // We'll keep all items visible (in the sense that we don't remove them),
      // but we only show 90 items per "page".
      function getTotalPages() {
        return Math.ceil(allHashes.length / itemsPerPage);
      }

      /***************************************************
       * 3. RENDER FUNCTION
       ***************************************************/
      function render() {
        // Update total votes display
        document.getElementById("totalVotes").textContent = totalVotes.toLocaleString();

        // Calculate start and end for pagination
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageItems = allHashes.slice(startIndex, endIndex);

        // We'll split these pageItems into 3 columns of 30 each
        const columnCount = 3;
        const itemsPerColumn = 30;
        const hashesGrid = document.getElementById("hashesGrid");
        hashesGrid.innerHTML = ""; // clear old content

        for (let col = 0; col < columnCount; col++) {
          const columnStart = col * itemsPerColumn;
          const columnEnd = columnStart + itemsPerColumn;
          const columnItems = pageItems.slice(columnStart, columnEnd);

          // Create a div for each column
          const colDiv = document.createElement("div");
          colDiv.className = "hash-column";

          // Build lines for each item in this column, highlighting if needed
          const linesHtml = columnItems.map((item) => highlightText(item, searchQuery)).join("");
          colDiv.innerHTML = linesHtml;

          hashesGrid.appendChild(colDiv);
        }

        // Update pagination text
        const pageInfo = document.getElementById("pageInfo");
        pageInfo.textContent = `Page ${currentPage} of ${getTotalPages()}`;

        // Disable/enable buttons as needed
        document.getElementById("prevBtn").disabled = currentPage === 1;
        document.getElementById("nextBtn").disabled = currentPage === getTotalPages();
      }

      /***************************************************
       * 4. HIGHLIGHT FUNCTION
       * Wrap matching parts of 'text' with <span class="highlight">.
       ***************************************************/
      function highlightText(text, query) {
        if (!query) return `<div>${text}</div>`; // no highlight if query is empty

        // Escape special regex chars in query
        const safeQuery = query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        const regex = new RegExp(safeQuery, "gi");

        // Replace matches with <span class="highlight">
        const highlighted = text.replace(regex, (match) => `<span class="highlight">${match}</span>`);
        return `<div>${highlighted}</div>`;
      }

      /***************************************************
       * 5. SEARCH + SCROLL TO MATCH
       ***************************************************/
      function performSearch() {
        searchQuery = document.getElementById("searchInput").value.trim();
        if (!searchQuery) {
          // If empty, just reset to page 1
          currentPage = 1;
          render();
          return;
        }

        // We highlight across all items, but also find the index of the first match
        let firstMatchIndex = -1;
        for (let i = 0; i < allHashes.length; i++) {
          if (allHashes[i].toLowerCase().includes(searchQuery.toLowerCase())) {
            firstMatchIndex = i;
            break;
          }
        }

        if (firstMatchIndex === -1) {
          // No match found, no highlight
          alert("No matches found.");
          searchQuery = ""; // clear the query so we don't highlight anything
          render();
          return;
        }

        // Found a match at firstMatchIndex. Figure out what page it's on:
        currentPage = Math.floor(firstMatchIndex / itemsPerPage) + 1;

        // Re-render so that page is loaded and matches are highlighted
        render();
      }

      /***************************************************
       * 6. EVENT HANDLERS
       ***************************************************/
      // Next / Prev Buttons
      document.getElementById("prevBtn").addEventListener("click", () => {
        if (currentPage > 1) {
          currentPage--;
          render();
        }
      });
      document.getElementById("nextBtn").addEventListener("click", () => {
        if (currentPage < getTotalPages()) {
          currentPage++;
          render();
        }
      });

      // Search
      document.getElementById("searchBtn").addEventListener("click", () => {
        performSearch();
      });
      document.getElementById("searchInput").addEventListener("keyup", (event) => {
        if (event.key === "Enter") {
          performSearch();
        }
      });

      /***************************************************
       * 7. INITIAL RENDER
       ***************************************************/
      render();
    </script>

    <footer class="footer">
      <div class="footer-left">
        <img src="img/calendar.png" class="footer-img" />
        <p id="datetime" data-date="<%= electionConfig.fakeCurrentDate %>"></p>
      </div>

      <div class="footer-center">
        <img src="img/copyright.png" class="footer-img" id="copyright-img" />
        <p>2025 - Fourmula 1</p>
      </div>

      <div class="footer-right">
        <img src="img/info.png" class="footer-img" id="info-img" />
        <p>Need help? Click&nbsp;</p>
        <a href="help_page">here.</a>
      </div>
    </footer>

    <script src="admin/js/sidebar.js"></script>

    <script>
      function formatDate(isoString) {
        const date = new Date(isoString);
        const options = {
          month: "long",
          day: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        };
        return date.toLocaleString("en-US", options).replace(",", " -").toUpperCase();
      }

      function updateDateTime() {
        const datetimeElement = document.getElementById("datetime");
        if (!datetimeElement) return;

        // Get the initial time from the data attribute
        let currentTime = new Date(datetimeElement.getAttribute("data-date"));

        function update() {
          datetimeElement.textContent = formatDate(currentTime);
          currentTime.setMinutes(currentTime.getMinutes() + 1); // Increment by 1 minute
        }

        update(); // Set initial formatted date
        setInterval(update, 60000); // Update every minute (60000ms)
      }

      document.addEventListener("DOMContentLoaded", updateDateTime);
    </script>

    <script src="admin/js/sidebar.js"></script>
    <script src="admin/js/index-admin.js"></script>
  </body>
</html>
