<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>BulSU Voting System</title>

    <link rel="stylesheet" type="text/css" href="admin/css/index-admin.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/sidebar.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/candidates.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/vote-tally.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/vote-tally.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/index-election.css" />
    <!-- <link rel="stylesheet" type="text/css" href="admin/css/sample/vote-tally.css" /> -->

    <link rel="stylesheet" type="text/css" href="admin/css/voter-id-form.css" />

    <link rel="stylesheet" type="text/css" href="admin/dependencies/progress-bar.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link href="https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=upins:wght@400;700&display=swap" rel="stylesheet" />

    <style>
      .main {
        position: relative; /* Positioning context for the modal */
      }

      /* Modal styling applied directly to .hashes-container */
      .hashes-container.modal {
        display: none; /* Hidden by default */
        position: absolute; /* Positioned relative to .main */
        z-index: 1000;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 80%; /* Adjust as needed */
        background-color: #fefefe; /* Modal background */
        padding: 20px;
        border: 1px solid #888;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      }

      /* Style the close button */
      .close-modal {
        color: #aaa;
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
      }

      .close-modal:hover,
      .close-modal:focus {
        color: #000;
        text-decoration: none;
      }
    </style>
  </head>

  <body>
    <header class="header" id="header">
      <div class="header-logo">
        <img src="../img/logo_tanikala.png" alt="Tanikala Logo" />
      </div>
      <div class="header-content">
        <h2>
          <span><%= electionConfig.electionName || "Tanikala Voting System" %></span>
        </h2>

        <strong>
          Election Status:
          <span id="currentPeriodDisplay" class="election-status" data-status="<%= electionConfig.currentPeriod.name %>"> <%= electionConfig.currentPeriod.name %> </span>
          |
          <em id="currentPeriodName" class="right-text"> <%= electionConfig.currentPeriod.name %> </em>
        </strong>

        <script>
          document.addEventListener("DOMContentLoaded", function () {
            const periodDisplay = document.getElementById("currentPeriodDisplay");
            const periodName = document.getElementById("currentPeriodName");

            if (!periodDisplay || !periodName) return;

            // Get the election name from EJS
            let electionName = periodDisplay.getAttribute("data-status") || "";
            console.log(electionName);
            let placeholderText = "";
            let leftColor = "#f4ab2a"; // Default color for active periods

            if (electionName === "Election Not Active") {
              placeholderText = "ELECTION NOT ACTIVE | No Configuration";
              leftColor = "#004aad";
            } else if (electionName === "Results Are Out Period" || electionName === "Results Double Checking Period") {
              placeholderText = "ELECTION ENDED | " + electionName;
              leftColor = "#a60212";
            } else if (electionName === "Temporarily Closed") {
              placeholderText = "TEMPORARILY CLOSED";
              leftColor = "a60212";
            } else {
              placeholderText = "ELECTION ACTIVE | " + electionName;
              leftColor = "#5fb643  ";
            }

            if (electionName != "Temporarily Closed") {
              let parts = placeholderText.split(" | ");
              let leftText = parts[0];
              let rightText = parts.length > 1 ? parts[1] : "";

              // Update the UI
              periodDisplay.textContent = leftText;
              periodDisplay.style.color = leftColor;
              periodName.textContent = rightText;
            } else {
              preiodDisplay.style.color = leftColor;
            }
          });
        </script>

        <% let duration = electionConfig.currentPeriod.duration; let startDate = ""; let endDate = ""; if (duration.includes(" to ")) { [startDate, endDate] = duration.split(" to "); } else { startDate = duration; endDate = "(Waiting for Admin)"; } %>

        <p><strong>Start Date:</strong> <%= startDate %></p>
        <p><strong>End Date:</strong> <%= endDate %></p>
      </div>
      <div class="header-user">
        <img src="<%= loggedInAdmin.img %>" alt="Admin Profile" />
        <div class="profile">
          <div class="admin-name"><%= loggedInAdmin.name %></div>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>
        <div class="dropdown" onclick="toggleDropdown()"></div>
        <div class="dropdown-menu">
          <a href="/edit-account">View Account</a>
          <hr class="dropdown-line" />
          <a href="/logout">Log Out</a>
        </div>
      </div>
    </header>

    <div class="content">
      <div class="sidebar close">
        <div class="profile-details">
          <img src="<%= loggedInAdmin.img %>" />
          <span class="profile-name"><%= loggedInAdmin.name %></span>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>

        <ul class="nav-links">
          <hr />
          <li>
            <a href="#">
              <i class="bx bx-menu"></i>
              <span class="link_name">Menu</span>
            </a>
          </li>
          <hr />
          <li>
            <a href="/dashboard">
              <i class="bx bxs-dashboard"></i>
              <span class="link_name">Dashboard</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/dashboard">Dashboard</a></li>
            </ul>
          </li>

          <li>
            <a href="/configuration">
              <i class="fa fa-cogs"></i>
              <span class="link_name">Configuration</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/configuration">Configuration</a></li>
            </ul>
          </li>
          <li>
            <a href="/candidates">
              <i class="fa fa-users"></i>
              <span class="link_name">Candidates</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/candidates">Candidates</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/blockchain-management">
                <i class="fa fa-link"></i>
                <span class="link_name">Blockchain</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/blockchain-management">Blockchain</a></li>
              <li><a href="/blockchain-management">Blockchain Management</a></li>
              <li><a href="/blockchain-activity-log">Activity Log</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link" id="active-tab">
              <a href="/voter-info">
                <i class="fa fa-bar-chart"></i>
                <span class="link_name">Election</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/voter-info"><%= electionConfig.electionName || "No Election Ongoing" %></a></li>
              <li><a href="/voter-info">Voter Info</a></li>
              <li><a href="/voter-turnout">Voter Turnout</a></li>
              <li><a href="/vote-tally" id="active-sub">Vote Tally</a></li>
              <li><a href="/results">Results</a></li>
              <li><a href="/reset">Reset Election</a></li>
            </ul>
          </li>

          <li>
            <a href="/archives">
              <i class="bx bx-archive"></i>
              <span class="link_name">Election Archives</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/archives">Election Archives</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/edit-account">
                <i class="fa fa-tasks"></i>
                <span class="link_name">System</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/edit-account">System</a></li>
              <li><a href="/edit-account">Edit Account</a></li>
              <li><a href="/manage-admins">Manage Admins</a></li>
              <li><a href="/help-page">Help Page</a></li>
              <li><a href="/system-activity-log">System Activity Log</a></li>
            </ul>
          </li>
        </ul>
      </div>
      <main class="main">
        <div class="title-container">
          <div class="r">
            <i class="fas fa-list-ol"></i>
            <h1 class="title">Vote Tally</h1>
          </div>
        </div>
        <hr class="title-line" />

        <div class="first-main">
          <div class="main-left">
            <h1 class="ssc">Supreme Student Council</h1>
            <% const presidentCandidates = candidates.filter(candidate => candidate.position === 'president' && candidate.name !== 'Abstain'); const abstainCandidate = candidates.find(candidate => candidate.position === 'president' && candidate.name === 'Abstain'); presidentCandidates.sort((a, b) =>
            Number(b.voteCount) - Number(a.voteCount)); const totalVotes = presidentCandidates.reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); %>
            <div class="container-ssc" id="container-president">
              <div class="container-position">
                <h1 class="position-ssc">President</h1>
              </div>
              <hr />
              <br />
              <% let calculatedTotalVotes = 0; %> <% presidentCandidates.forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; calculatedTotalVotes += voteCount; const percentage = totalVotes > 0 ? ((voteCount / totalVotes) * 100).toFixed(2) : 0; %>
              <div class="candidate">
                <div class="img-container">
                  <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                </div>
                <div class="candidate-info">
                  <h2><%= candidate.name %></h2>
                  <p><%= candidate.party %></p>
                  <div class="row">
                    <div class="progress-bar">
                      <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                    </div>
                    <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                  </div>
                </div>
              </div>
              <a href="#" class="votes" data-uniqueid="<%= candidate.uniqueId %>" data-name="<%= candidate.name %>">View List of Voter IDs</a>

              <% }); %> <% if (abstainCandidate) { const voteCount = Number(abstainCandidate.voteCount) || 0; calculatedTotalVotes += voteCount; const percentage = totalVotes > 0 ? ((voteCount / totalVotes) * 100).toFixed(2) : 0; %>
              <div class="candidate abstain">
                <div class="img-container">
                  <h2><%= abstainCandidate.name %></h2>
                </div>
                <div class="candidate-info">
                  <div class="row">
                    <div class="progress-bar">
                      <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                    </div>
                    <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                  </div>
                </div>
              </div>
              <a href="#" class="votes votes-abstain" data-uniqueid="<%= abstainCandidate.uniqueId %>" data-name="<%= abstainCandidate.name %>">View List of Voter IDs</a>
              <% } %>
              <h3 class="right">
                <span><u><%= calculatedTotalVotes %></u></span> total votes cast
              </h3>
            </div>
            <script>
              window.addEventListener("load", function () {
                const progressElements = document.querySelectorAll(".progress");
                progressElements.forEach((el) => {
                  const targetWidth = el.getAttribute("data-target");
                  el.style.width = targetWidth;
                });
              });
            </script>

            <% const viceCandidates = candidates.filter(candidate => candidate.position === 'vice president' && candidate.name !== 'Abstain'); const abstainCandidateVice = candidates.find(candidate => candidate.position === 'vice president' && candidate.name === 'Abstain'); viceCandidates.sort((a,
            b) => Number(b.voteCount) - Number(a.voteCount)); const totalVotesVice = viceCandidates.reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); %>
            <div class="container-ssc" id="container-vice-president">
              <div class="container-position">
                <h1 class="position-ssc">Vice President</h1>
              </div>
              <hr />
              <br />
              <% let calculatedTotalVotesVice = 0; %> <% viceCandidates.forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; calculatedTotalVotesVice += voteCount; const percentage = totalVotesVice > 0 ? ((voteCount / totalVotesVice) * 100).toFixed(2) : 0; %>
              <div class="candidate">
                <div class="img-container">
                  <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                </div>
                <div class="candidate-info">
                  <h2><%= candidate.name %></h2>
                  <p><%= candidate.party %></p>
                  <div class="row">
                    <div class="progress-bar">
                      <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                    </div>
                    <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                  </div>
                </div>
              </div>
              <a href="#" class="votes" data-uniqueid="<%= candidate.uniqueId %>" data-name="<%= candidate.name %>">View List of Voter IDs</a>
              <% }); %> <% if (abstainCandidateVice) { const voteCount = Number(abstainCandidateVice.voteCount) || 0; calculatedTotalVotesVice += voteCount; const percentage = totalVotesVice > 0 ? ((voteCount / totalVotesVice) * 100).toFixed(2) : 0; %>
              <div class="candidate">
                <div class="img-container">
                  <h2><%= abstainCandidateVice.name %></h2>
                </div>
                <div class="candidate-info">
                  <div class="row">
                    <div class="progress-bar">
                      <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                    </div>
                    <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                  </div>
                </div>
              </div>
              <a href="#" class="votes" data-uniqueid="<%= abstainCandidateVice.uniqueId %>" data-name="<%= abstainCandidateVice.name %>">View List of Voter IDs</a>
              <% } %>
              <h3 class="right">
                <span><u><%= calculatedTotalVotesVice %></u></span> total votes cast
              </h3>
            </div>
            <script>
              window.addEventListener("load", function () {
                const progressElements = document.querySelectorAll(".progress");
                progressElements.forEach((el) => {
                  const targetWidth = el.getAttribute("data-target");
                  el.style.width = targetWidth;
                });
              });
            </script>

            <% const senatorCandidates = candidates.filter(candidate => candidate.position === 'senator' && candidate.name !== 'Abstain'); senatorCandidates.sort((a, b) => Number(b.voteCount) - Number(a.voteCount)); const maxVote = senatorCandidates.reduce((max, candidate) => Math.max(max,
            Number(candidate.voteCount) || 0), 0); const totalVotesSenator = senatorCandidates.reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); %>
            <div class="container-ssc" id="container-senator">
              <div class="container-position">
                <h1 class="position-ssc">Senators</h1>
              </div>
              <hr />
              <br />
              <% let calculatedTotalVotesSenator = 0; %> <% senatorCandidates.forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; calculatedTotalVotesSenator += voteCount; const percentage = maxVote > 0 ? ((voteCount / maxVote) * 100).toFixed(2) : 0; %>
              <div class="candidate">
                <div class="img-container">
                  <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                </div>
                <div class="candidate-info">
                  <h2><%= candidate.name %></h2>
                  <p><%= candidate.party %></p>
                  <div class="row">
                    <div class="progress-bar">
                      <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                    </div>
                    <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                  </div>
                </div>
              </div>
              <a href="#" class="votes" data-uniqueid="<%= candidate.uniqueId %>" data-name="<%= candidate.name %>">View List of Voter IDs</a>
              <% }); %>
              <br />
              <h3 class="right">
                <span><u><%= calculatedTotalVotesSenator %></u></span> total votes cast
              </h3>
            </div>
            <script>
              window.addEventListener("load", function () {
                const progressElements = document.querySelectorAll(".progress");
                progressElements.forEach((el) => {
                  const targetWidth = el.getAttribute("data-target");
                  el.style.width = targetWidth;
                });
              });
            </script>
          </div>
          <div class="main-right">
            <div class="main-right-header">
              <h1 class="lsc">Local Student Council</h1>
              <br />
              <select name="college" id="college-selector">
                <option value="CAFA" selected>College of Architecture and Fine Arts (CAFA)</option>
                <option value="CAL">College of Arts and Letters (CAL)</option>
                <option value="CBEA">College of Business Education and Accountancy (CBEA)</option>
                <option value="CCJE">College of Criminal Justice Education (CCJE)</option>
                <option value="CHTM">College of Hospitality and Tourism Management (CHTM)</option>
                <option value="CICT">College of Information and Communications Technology (CICT)</option>
                <option value="CIT">College of Industrial Technology (CIT)</option>
                <option value="CN">College of Nursing (CN)</option>
                <option value="COE">College of Engineering (COE)</option>
                <option value="COED">College of Education (COED)</option>
                <option value="CS">College of Science (CS)</option>
                <option value="CSER">College of Sports, Exercise, and Recreation (CSER)</option>
                <option value="CSSP">College of Social Sciences and Philosophy (CSSP)</option>
              </select>
            </div>
            <br />
            <div id="lsc-container">
              <% const governorCandidates = candidates.filter(candidate => candidate.position === 'governor' && candidate.college && candidate.name !== 'Abstain'); const abstainCandidateGovernor = candidates.find(candidate => candidate.position === 'governor' && candidate.college && candidate.name
              === 'Abstain'); governorCandidates.sort((a, b) => Number(b.voteCount) - Number(a.voteCount)); const governorTotalVotes = governorCandidates.reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); let calculatedTotalVotesGovernor = governorTotalVotes; %>
              <div class="container-lsc" id="container-lsc-governor">
                <div class="container-position">
                  <h1 class="position-lsc">Governor</h1>
                </div>
                <hr />
                <br />
                <% governorCandidates.forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; const percentage = governorTotalVotes > 0 ? ((voteCount / governorTotalVotes) * 100).toFixed(2) : 0; %>
                <div class="candidate lsc-candidate" data-college="<%= candidate.college %>">
                  <div class="candidate">
                    <div class="img-container">
                      <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                    </div>
                    <div class="candidate-info">
                      <h2><%= candidate.name %></h2>
                      <p><%= candidate.party %></p>
                      <div class="row">
                        <div class="progress-bar">
                          <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                        </div>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                      </div>
                    </div>
                  </div>
                  <a href="#" class="votes" data-uniqueid="<%= candidate.uniqueId %>" data-name="<%= candidate.name %>">View List of Voter IDs</a>
                </div>

                <% }); %> <% if (abstainCandidateGovernor) { const voteCount = Number(abstainCandidateGovernor.voteCount) || 0; const percentage = governorTotalVotes > 0 ? ((voteCount / governorTotalVotes) * 100).toFixed(2) : 0; const colleges = ["CAFA", "CAL", "CBEA", "CCJE", "CHTM", "CICT", "CIT",
                "CN", "COE", "COED", "CS", "CSER", "CSSP"]; colleges.forEach(college => { %>
                <div class="candidate lsc-candidate abstain" data-college="<%= college %>">
                  <div class="candidate">
                    <div class="img-container">
                      <h2><%= abstainCandidateGovernor.name %></h2>
                    </div>
                    <div class="candidate-info">
                      <div class="row">
                        <div class="progress-bar">
                          <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                        </div>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                      </div>
                    </div>
                  </div>
                  <a href="#" class="votes" data-uniqueid="<%= abstainCandidateGovernor.uniqueId %>" data-name="<%= abstainCandidateGovernor.name %>">View List of Voter IDs</a>
                </div>

                <% }); } %>
                <h3 class="right" id="governor-total">
                  <span><u><%= calculatedTotalVotesGovernor %></u></span> total votes cast
                </h3>
              </div>
              <% const viceGovernorCandidates = candidates.filter(candidate => candidate.position === 'vice governor' && candidate.college && candidate.name !== 'Abstain'); const abstainCandidateViceGovernor = candidates.find(candidate => candidate.position === 'vice governor' && candidate.college
              && candidate.name === 'Abstain'); viceGovernorCandidates.sort((a, b) => Number(b.voteCount) - Number(a.voteCount)); const totalVotesViceGovernor = viceGovernorCandidates.reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); %>
              <div class="container-lsc" id="container-lsc-vice-governor">
                <div class="container-position">
                  <h1 class="position-lsc">Vice Governor</h1>
                </div>
                <hr />
                <br />
                <% let calculatedTotalVotesViceGovernor = 0; %> <% viceGovernorCandidates.forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; calculatedTotalVotesViceGovernor += voteCount; const percentage = totalVotesViceGovernor > 0 ? ((voteCount / totalVotesViceGovernor) *
                100).toFixed(2) : 0; %>
                <div class="candidate lsc-candidate" data-college="<%= candidate.college %>">
                  <div class="candidate">
                    <div class="img-container">
                      <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                    </div>
                    <div class="candidate-info">
                      <h2><%= candidate.name %></h2>
                      <p><%= candidate.party %></p>
                      <div class="row">
                        <div class="progress-bar">
                          <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                        </div>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                      </div>
                    </div>
                  </div>
                  <a href="#" class="votes" data-uniqueid="<%= candidate.uniqueId %>" data-name="<%= candidate.name %>">View List of Voter IDs</a>
                </div>

                <% }); %> <% if (abstainCandidateViceGovernor) { const voteCount = Number(abstainCandidateViceGovernor.voteCount) || 0; const percentage = totalVotesViceGovernor > 0 ? ((voteCount / totalVotesViceGovernor) * 100).toFixed(2) : 0; const colleges = ["CAFA", "CAL", "CBEA", "CCJE",
                "CHTM", "CICT", "CIT", "CN", "COE", "COED", "CS", "CSER", "CSSP"]; colleges.forEach(college => { %>
                <div class="candidate lsc-candidate abstain" data-college="<%= college %>">
                  <div class="candidate">
                    <div class="img-container">
                      <h2><%= abstainCandidateViceGovernor.name %></h2>
                    </div>
                    <div class="candidate-info">
                      <div class="row">
                        <div class="progress-bar">
                          <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                        </div>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                      </div>
                    </div>
                  </div>
                  <a href="#" class="votes" data-uniqueid="<%= abstainCandidateViceGovernor.uniqueId %>" data-name="<%= abstainCandidateViceGovernor.name %>">View List of Voter IDs</a>
                </div>

                <% }); } %>
                <h3 class="right" id="vice-governor-total">
                  <span><u><%= calculatedTotalVotesViceGovernor %></u></span> total votes cast
                </h3>
              </div>
              <% const boardMembersAll = candidates.filter(candidate => candidate.position === 'board member' && candidate.college && candidate.program); const boardMembersNonAbstain = boardMembersAll.filter(candidate => candidate.name !== 'Abstain'); const boardMembersAbstain =
              boardMembersAll.filter(candidate => candidate.name === 'Abstain'); const totalVotesBoardMember = boardMembersNonAbstain.reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); let boardMembersByProgram = {}; boardMembersNonAbstain.forEach(candidate => { if
              (!boardMembersByProgram[candidate.program]) { boardMembersByProgram[candidate.program] = []; } boardMembersByProgram[candidate.program].push(candidate); }); Object.keys(boardMembersByProgram).forEach(program => { boardMembersByProgram[program].sort((a, b) => Number(b.voteCount) -
              Number(a.voteCount)); }); let abstainByProgram = {}; boardMembersAbstain.forEach(candidate => { if (!abstainByProgram[candidate.program]) { abstainByProgram[candidate.program] = []; } abstainByProgram[candidate.program].push(candidate); }); %>
              <div class="container-lsc" id="container-lsc-board-member">
                <div class="container-position">
                  <h1 class="position-lsc">Board Member</h1>
                </div>
                <hr />
                <% Object.keys(boardMembersByProgram).forEach(program => { let programTotalVotes = boardMembersByProgram[program].reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); if (abstainByProgram[program]) { programTotalVotes += abstainByProgram[program].reduce((acc,
                candidate) => acc + (Number(candidate.voteCount) || 0), 0); } %>
                <div class="program-group" id="college-<%= boardMembersByProgram[program][0].college %>">
                  <h2 class="program-header">
                    <ul>
                      <%= program %>
                    </ul>
                  </h2>
                  <br />
                  <% boardMembersByProgram[program].forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; const percentage = programTotalVotes > 0 ? ((voteCount / programTotalVotes) * 100).toFixed(2) : 0; %>
                  <div class="candidate lsc-candidate" data-college="<%= candidate.college %>" data-program="<%= candidate.program %>">
                    <div class="candidate">
                      <div class="img-container">
                        <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                      </div>
                      <div class="candidate-info">
                        <h2><%= candidate.name %></h2>
                        <p><%= candidate.party %></p>
                        <div class="row">
                          <div class="progress-bar">
                            <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                          </div>
                          <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                        </div>
                      </div>
                    </div>
                    <a href="#" class="votes" data-uniqueid="<%= candidate.uniqueId %>" data-name="<%= candidate.name %>">View List of Voter IDs</a>
                  </div>

                  <% }); %> <% if (abstainByProgram[program]) { abstainByProgram[program].forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; const percentage = programTotalVotes > 0 ? ((voteCount / programTotalVotes) * 100).toFixed(2) : 0; %>
                  <div class="candidate lsc-candidate" data-college="<%= candidate.college %>" data-program="<%= candidate.program %>">
                    <div class="candidate">
                      <div class="img-container">
                        <h2><%= candidate.name %></h2>
                      </div>
                      <div class="candidate-info">
                        <div class="row">
                          <div class="progress-bar">
                            <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                          </div>
                          <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                        </div>
                      </div>
                    </div>
                    <a href="#" class="votes" data-uniqueid="<%= abstainCandidateVice.uniqueId %>" data-name="<%= abstainCandidateVice.name %>">View List of Voter IDs</a>
                  </div>

                  <% }); } %>
                  <h3 class="right">
                    <span><u><%= programTotalVotes %></u></span> total votes cast
                  </h3>
                </div>
                <% }); %>
              </div>
              <script>
                document.addEventListener("DOMContentLoaded", function () {
                  const selector = document.getElementById("college-selector");
                  function filterLSCCandidates() {
                    const selectedCollege = selector.value;
                    const candidateCards = document.querySelectorAll(".lsc-candidate");
                    candidateCards.forEach((card) => {
                      const candidateCollege = card.getAttribute("data-college");
                      if (!selectedCollege || candidateCollege === selectedCollege) {
                        card.style.display = "block";
                      } else {
                        card.style.display = "none";
                      }
                    });
                    const programGroups = document.querySelectorAll(".program-group");
                    programGroups.forEach((group) => {
                      if (group.id === "college-" + selectedCollege) {
                        group.style.display = "block";
                      } else {
                        group.style.display = "none";
                      }
                    });
                    recalcTotals();
                  }
                  function recalcTotals() {
                    const governorContainer = document.getElementById("container-lsc-governor");
                    let governorTotal = 0;
                    const governorCards = governorContainer.querySelectorAll(".lsc-candidate");
                    governorCards.forEach((card) => {
                      if (card.style.display !== "none") {
                        const progressEl = card.querySelector(".progress");
                        if (progressEl) {
                          const text = progressEl.textContent || "";
                          const votes = parseInt(text.split(" ")[0], 10);
                          if (!isNaN(votes)) governorTotal += votes;
                        }
                      }
                    });
                    const governorTotalEl = document.getElementById("governor-total").querySelector("span u");
                    governorTotalEl.textContent = governorTotal;
                    const viceContainer = document.getElementById("container-lsc-vice-governor");
                    let viceTotal = 0;
                    const viceCards = viceContainer.querySelectorAll(".lsc-candidate");
                    viceCards.forEach((card) => {
                      if (card.style.display !== "none") {
                        const progressEl = card.querySelector(".progress");
                        if (progressEl) {
                          const text = progressEl.textContent || "";
                          const votes = parseInt(text.split(" ")[0], 10);
                          if (!isNaN(votes)) viceTotal += votes;
                        }
                      }
                    });
                    const viceTotalEl = document.getElementById("vice-governor-total").querySelector("span u");
                    viceTotalEl.textContent = viceTotal;
                  }
                  selector.addEventListener("change", filterLSCCandidates);
                  filterLSCCandidates();
                });
              </script>
            </div>
          </div>
        </div>
      </main>
    </div>

    <script>
      document.querySelectorAll(".votes").forEach((button) => {
        button.addEventListener("click", async function (event) {
          event.preventDefault();
          const uniqueId = this.dataset.uniqueid;
          console.log("Unique ID clicked:", uniqueId); // Debug log
          if (!uniqueId) {
            console.error("Unique ID not found for candidate");
            return;
          }
          try {
            const response = await fetch(`/api/voter-ids/${uniqueId}`);
            console.log("API response status:", response.status); // Debug log
            const data = await response.json();
            console.log("Data fetched:", data); // Debug log
            if (data.error) {
              alert(data.error);
              return;
            }
            // Update allHashes with real voter IDs
            allHashes.length = 0;
            allHashes.push(...data.emails);
            document.querySelector(".hashes-title").textContent = `List of Voter IDs for Candidate`;
            render(); // Re-render the hashes grid
            document.querySelector("#totalVotes").textContent = allHashes.length;
          } catch (error) {
            console.error("Error fetching voter IDs:", error);
          }
        });
      });
    </script>

    <!-- sample voter ids form -->
    <!-- Modal wrapper -->
    <div class="hashes-container modal">
      <span class="close-modal">&times;</span>
      <h2 class="hashes-title">List of Transaction Hashes for "John Doe"</h2>
      <div class="top-bar">
        <strong>
          <p class="total-votes">Total Votes: <span id="totalVotes"></span></p>
        </strong>
        <div class="search-bar">
          <input type="text" id="searchInput" placeholder="Search..." />
          <button id="searchBtn">
            <i class="fa fa-search"></i>
          </button>
        </div>
      </div>

      <div class="hashes-grid" id="hashesGrid">
        <!-- The 3-column listing of transaction hashes goes here -->
      </div>

      <div class="pagination">
        <button id="prevBtn">&lt;</button>
        <span id="pageInfo">Page 1 of 1</span>
        <button id="nextBtn">&gt;</button>
      </div>
    </div>

    <script>
      // Get the modal element (which is now the .hashes-container)
      const modal = document.querySelector(".hashes-container.modal");
      // Get the close button inside the modal
      const closeBtn = document.querySelector(".close-modal");

      // Toggle modal display when any .votes button is clicked
      document.querySelectorAll(".votes").forEach((button) => {
        button.addEventListener("click", function (event) {
          event.preventDefault();
          // You can call your fetch function here if needed.
          // For popup functionality, we just toggle the modal.
          modal.style.display = "block";
        });
      });

      // Close the modal when the close button is clicked
      closeBtn.addEventListener("click", () => {
        modal.style.display = "none";
      });

      // Optional: Close modal when clicking outside modal content (if needed)
      // Note: if the entire .hashes-container is the modal, clicking anywhere inside will close it.
      // You might want to add an inner wrapper if that behavior isn't desired.
      window.addEventListener("click", function (event) {
        if (event.target === modal) {
          modal.style.display = "none";
        }
      });
    </script>

    <script>
      /***************************************************
       * 1. SAMPLE DATA
       ***************************************************/
      const allHashes = [];
      // for (let i = 1; i <= 390; i++) {
      //   // Example hash text
      //   const randomHash = Math.random().toString(36).substring(2, 15);
      //   allHashes.push(`${i}. ${randomHash}${randomHash}`);
      // }

      // For demonstration, let's say total votes is 1500:
      const totalVotes = 1500;

      /***************************************************
       * 2. PAGINATION & STATE
       ***************************************************/
      // We want 90 items per page (30 items per column * 3 columns).
      const itemsPerPage = 90;
      let currentPage = 1;
      let searchQuery = ""; // We'll store the user query, for highlighting

      // We'll keep all items visible (in the sense that we don't remove them),
      // but we only show 90 items per "page".
      function getTotalPages() {
        return Math.ceil(allHashes.length / itemsPerPage);
      }

      /***************************************************
       * 3. RENDER FUNCTION
       ***************************************************/
      function render() {
        // Update total votes display
        document.getElementById("totalVotes").textContent = totalVotes.toLocaleString();

        // Calculate start and end for pagination
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageItems = allHashes.slice(startIndex, endIndex);

        // We'll split these pageItems into 3 columns of 30 each
        const columnCount = 3;
        const itemsPerColumn = 30;
        const hashesGrid = document.getElementById("hashesGrid");
        hashesGrid.innerHTML = ""; // clear old content

        for (let col = 0; col < columnCount; col++) {
          const columnStart = col * itemsPerColumn;
          const columnEnd = columnStart + itemsPerColumn;
          const columnItems = pageItems.slice(columnStart, columnEnd);

          // Create a div for each column
          const colDiv = document.createElement("div");
          colDiv.className = "hash-column";

          // Build lines for each item in this column, highlighting if needed
          const linesHtml = columnItems.map((item) => highlightText(item, searchQuery)).join("");
          colDiv.innerHTML = linesHtml;

          hashesGrid.appendChild(colDiv);
        }

        // Update pagination text
        const pageInfo = document.getElementById("pageInfo");
        pageInfo.textContent = `Page ${currentPage} of ${getTotalPages()}`;

        // Disable/enable buttons as needed
        document.getElementById("prevBtn").disabled = currentPage === 1;
        document.getElementById("nextBtn").disabled = currentPage === getTotalPages();
      }

      /***************************************************
       * 4. HIGHLIGHT FUNCTION
       * Wrap matching parts of 'text' with <span class="highlight">.
       ***************************************************/
      function highlightText(text, query) {
        if (!query) return `<div>${text}</div>`; // no highlight if query is empty

        // Escape special regex chars in query
        const safeQuery = query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        const regex = new RegExp(safeQuery, "gi");

        // Replace matches with <span class="highlight">
        const highlighted = text.replace(regex, (match) => `<span class="highlight">${match}</span>`);
        return `<div>${highlighted}</div>`;
      }

      /***************************************************
       * 5. SEARCH + SCROLL TO MATCH
       ***************************************************/
      function performSearch() {
        searchQuery = document.getElementById("searchInput").value.trim();
        if (!searchQuery) {
          // If empty, just reset to page 1
          currentPage = 1;
          render();
          return;
        }

        // We highlight across all items, but also find the index of the first match
        let firstMatchIndex = -1;
        for (let i = 0; i < allHashes.length; i++) {
          if (allHashes[i].toLowerCase().includes(searchQuery.toLowerCase())) {
            firstMatchIndex = i;
            break;
          }
        }

        if (firstMatchIndex === -1) {
          // No match found, no highlight
          alert("No matches found.");
          searchQuery = ""; // clear the query so we don't highlight anything
          render();
          return;
        }

        // Found a match at firstMatchIndex. Figure out what page it's on:
        currentPage = Math.floor(firstMatchIndex / itemsPerPage) + 1;

        // Re-render so that page is loaded and matches are highlighted
        render();
      }

      /***************************************************
       * 6. EVENT HANDLERS
       ***************************************************/
      // Next / Prev Buttons
      document.getElementById("prevBtn").addEventListener("click", () => {
        if (currentPage > 1) {
          currentPage--;
          render();
        }
      });
      document.getElementById("nextBtn").addEventListener("click", () => {
        if (currentPage < getTotalPages()) {
          currentPage++;
          render();
        }
      });

      // Search
      document.getElementById("searchBtn").addEventListener("click", () => {
        performSearch();
      });
      document.getElementById("searchInput").addEventListener("keyup", (event) => {
        if (event.key === "Enter") {
          performSearch();
        }
      });

      /***************************************************
       * 7. INITIAL RENDER
       ***************************************************/
      render();
    </script>

    <footer class="footer">
      <div class="footer-left">
        <img src="img/calendar.png" class="footer-img" />
        <p id="datetime" data-date="<%= electionConfig.fakeCurrentDate %>"></p>
      </div>

      <div class="footer-center">
        <img src="img/copyright.png" class="footer-img" id="copyright-img" />
        <p>2025 - Fourmula 1</p>
      </div>

      <div class="footer-right">
        <img src="img/info.png" class="footer-img" id="info-img" />
        <p>Need help? Click&nbsp;</p>
        <a href="help_page">here.</a>
      </div>
    </footer>

    <script src="admin/js/sidebar.js"></script>

    <script>
      function formatDate(isoString) {
        const date = new Date(isoString);
        const options = {
          month: "long",
          day: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        };
        return date.toLocaleString("en-US", options).replace(",", " -").toUpperCase();
      }

      function updateDateTime() {
        const datetimeElement = document.getElementById("datetime");
        if (!datetimeElement) return;

        // Get the initial time from the data attribute
        let currentTime = new Date(datetimeElement.getAttribute("data-date"));

        function update() {
          datetimeElement.textContent = formatDate(currentTime);
          currentTime.setMinutes(currentTime.getMinutes() + 1); // Increment by 1 minute
        }

        update(); // Set initial formatted date
        setInterval(update, 60000); // Update every minute (60000ms)
      }

      document.addEventListener("DOMContentLoaded", updateDateTime);
    </script>

    <script src="admin/js/sidebar.js"></script>
    <script src="admin/js/index-admin.js"></script>
  </body>
</html>
