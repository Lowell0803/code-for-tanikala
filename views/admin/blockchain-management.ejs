<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>BulSU Voting System</title>

    <link rel="stylesheet" type="text/css" href="admin/css/index-admin.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/sidebar.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/blockchain-management.css" />

    <!-- Boxicons CDN Link -->
    <link href="https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />

    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=upins:wght@400;700&display=swap" rel="stylesheet" />

    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  </head>

  <body>
    <header class="header" id="header">
      <div class="header-logo">
        <img src="../img/logo_tanikala.png" alt="Tanikala Logo" />
      </div>
      <div class="header-content">
        <h2>
          <span><%= electionConfig.electionName || "Tanikala Voting System" %></span>
        </h2>

        <strong>
          Election Status:
          <span id="currentPeriodDisplay" class="election-status" data-status="<%= electionConfig.currentPeriod.name %>"> <%= electionConfig.currentPeriod.name %> </span>
          |
          <em id="currentPeriodName" class="right-text"> <%= electionConfig.currentPeriod.name %> </em>
        </strong>

        <script>
          document.addEventListener("DOMContentLoaded", function () {
            const periodDisplay = document.getElementById("currentPeriodDisplay");
            const periodName = document.getElementById("currentPeriodName");

            if (!periodDisplay || !periodName) return;

            // Get the election name from EJS
            let electionName = periodDisplay.getAttribute("data-status") || "";
            console.log(electionName);
            let placeholderText = "";
            let leftColor = "#f4ab2a"; // Default color for active periods

            if (electionName === "Election Not Active") {
              placeholderText = "ELECTION NOT ACTIVE | No Configuration";
              leftColor = "#004aad";
            } else if (electionName === "Results Are Out Period" || electionName === "Results Double Checking Period") {
              placeholderText = "ELECTION ENDED | " + electionName;
              leftColor = "#a60212";
            } else if (electionName === "Temporarily Closed") {
              placeholderText = "TEMPORARILY CLOSED";
              leftColor = "a60212";
            } else {
              placeholderText = "ELECTION ACTIVE | " + electionName;
              leftColor = "#5fb643  ";
            }

            if (electionName != "Temporarily Closed") {
              let parts = placeholderText.split(" | ");
              let leftText = parts[0];
              let rightText = parts.length > 1 ? parts[1] : "";

              // Update the UI
              periodDisplay.textContent = leftText;
              periodDisplay.style.color = leftColor;
              periodName.textContent = rightText;
            } else {
              preiodDisplay.style.color = leftColor;
            }
          });
        </script>

        <% let duration = electionConfig.currentPeriod.duration; let startDate = ""; let endDate = ""; if (duration.includes(" to ")) { [startDate, endDate] = duration.split(" to "); } else { startDate = duration; endDate = "(Waiting for Admin)"; } %>

        <p><strong>Start Date:</strong> <%= startDate %></p>
        <p><strong>End Date:</strong> <%= endDate %></p>
      </div>
      <div class="header-user">
        <img src="<%= loggedInAdmin.img %>" alt="Admin Profile" />
        <div class="profile">
          <div class="admin-name"><%= loggedInAdmin.name %></div>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>
        <div class="dropdown" onclick="toggleDropdown()"></div>
        <div class="dropdown-menu">
          <a href="/edit-account">View Account</a>
          <hr class="dropdown-line" />
          <a href="/logout">Log Out</a>
        </div>
      </div>
    </header>

    <div class="content">
      <div class="sidebar close">
        <div class="profile-details">
          <img src="<%= loggedInAdmin.img %>" />
          <span class="profile-name"><%= loggedInAdmin.name %></span>
          <span class="job"><%= loggedInAdmin.role %></span>
        </div>

        <ul class="nav-links">
          <hr />
          <li>
            <a href="#">
              <i class="bx bx-menu"></i>
              <span class="link_name">Menu</span>
            </a>
          </li>
          <hr />
          <li>
            <a href="/dashboard">
              <i class="bx bxs-dashboard"></i>
              <span class="link_name">Dashboard</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/dashboard">Dashboard</a></li>
            </ul>
          </li>

          <li>
            <a href="/configuration">
              <i class="fa fa-cogs"></i>
              <span class="link_name">Configuration</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/configuration">Configuration</a></li>
            </ul>
          </li>
          <li>
            <a href="/candidates">
              <i class="fa fa-users"></i>
              <span class="link_name">Candidates</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/candidates">Candidates</a></li>
            </ul>
          </li>

          <li id="active-tab">
            <div class="icon-link">
              <a href="/blockchain-management">
                <i class="fa fa-link"></i>
                <span class="link_name">Blockchain</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/blockchain-management">Blockchain</a></li>
              <li id="active-sub"><a href="/blockchain-management">Blockchain Management</a></li>
              <li><a href="/blockchain-activity-log">Activity Log</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/voter-info">
                <i class="fa fa-bar-chart"></i>
                <span class="link_name">Election</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/voter-info"><%= electionConfig.electionName || "No Election Ongoing" %></a></li>
              <li><a href="/voter-info">Voter Info</a></li>
              <li><a href="/voter-turnout">Voter Turnout</a></li>
              <li><a href="/vote-tally">Vote Tally</a></li>
              <li><a href="/results">Results</a></li>
              <li><a href="/reset">Reset Election</a></li>
            </ul>
          </li>

          <li>
            <a href="/archives">
              <i class="bx bx-archive"></i>
              <span class="link_name">Election Archives</span>
            </a>
            <ul class="sub-menu blank">
              <li><a class="link_name" href="/archives">Election Archives</a></li>
            </ul>
          </li>

          <li>
            <div class="icon-link">
              <a href="/edit-account">
                <i class="fa fa-tasks"></i>
                <span class="link_name">System</span>
              </a>
              <i class="bx bxs-chevron-down arrow"></i>
            </div>
            <ul class="sub-menu">
              <li><a class="link_name" href="/edit-account">System</a></li>
              <li><a href="/edit-account">Edit Account</a></li>
              <li><a href="/manage-admins">Manage Admins</a></li>
              <li><a href="/help-page">Help Page</a></li>
              <li><a href="/system-activity-log">System Activity Log</a></li>
            </ul>
          </li>
        </ul>
      </div>
      <main class="main">
        <div id="container-overlay">
          <div class="title-container">
            <div class="r">
              <i class="fa fa-link"></i>
              <h1 class="title">Blockchain Management</h1>
            </div>
          </div>
          <hr class="title-line" />
          <div class="page-title">
            <div class="blockchain">
              <h4>Blockchain Link: <span>No data available yet</span></h4>
              <h4>Live Transaction Queue Count: <span>No data available yet</span></h4>
            </div>
            <div class="smart">
              <h4>Smart Contract Status: Not Deployed | Deployed</h4>

              <h4>Voting Status: Not Open | Open</h4>
            </div>
          </div>
          <div class="first-main">
            <div class="left">
              <h2>Blockchain Information</h2>
              <br />
              <h2>Compile & Deploy AdminCandidates Contract via MetaMask</h2>
              <h2>Smart Contract Management</h2>
              <!-- Optional: allow user to override provider URL (if left blank, MetaMask provider is used) -->
              <input id="providerInput" placeholder="Custom Provider URL (optional)" style="width: 300px; margin-bottom: 10px" />
              <br />
              <button id="compileButton" class="">Compile Contract</button>
              <button id="deployButton" class=" ">Deploy Contract</button>
              <div id="apiResponse" style="margin-top: 20px; white-space: pre-wrap"></div>

              <script>
                // Global variable to store the contract artifact from the compile API
                let contractArtifact = null;

                // Call the compile endpoint on the server
                async function compileContract() {
                  const outputDiv = document.getElementById("apiResponse");
                  outputDiv.innerText = "Compiling contract...";
                  try {
                    const res = await fetch("/api/compile-contract");
                    const data = await res.json();
                    if (data.success) {
                      contractArtifact = data.artifact;
                      outputDiv.innerText = "Compilation successful!\nABI:\n" + JSON.stringify(contractArtifact.abi, null, 2) + "\n\nBytecode:\n" + contractArtifact.evm.bytecode.object;
                    } else {
                      outputDiv.innerText = "Compilation failed:\n" + JSON.stringify(data.errors || data.message, null, 2);
                    }
                  } catch (err) {
                    outputDiv.innerText = "Error: " + err.message;
                  }
                }

                // Deploy the contract using MetaMask for signing
                async function deployContract() {
                  const outputDiv = document.getElementById("apiResponse");
                  if (!contractArtifact) {
                    outputDiv.innerText = "Contract artifact not available. Please compile first.";
                    return;
                  }

                  outputDiv.innerText = "Deploying contract...";

                  // If a custom provider URL is provided, you might use it for reading data;
                  // however, to sign and deploy using MetaMask, we must use window.ethereum.
                  const customProviderUrl = document.getElementById("providerInput").value.trim();
                  let provider;
                  if (customProviderUrl === "") {
                    // Use MetaMask's provider
                    if (typeof window.ethereum === "undefined") {
                      outputDiv.innerText = "MetaMask is not installed.";
                      return;
                    }
                    provider = new ethers.providers.Web3Provider(window.ethereum);
                    await provider.send("eth_requestAccounts", []);
                  } else {
                    // If a custom provider URL is given, we'll use it to create a provider.
                    // Note: This will NOT allow signing via MetaMask because the custom provider
                    // does not have access to MetaMask's signer. For deployment with MetaMask,
                    // you must leave this blank.
                    provider = new ethers.providers.JsonRpcProvider(customProviderUrl);
                    outputDiv.innerText += "\nNote: Custom provider provided; deployment via MetaMask requires using MetaMask's provider.";
                    return;
                  }

                  try {
                    const signer = provider.getSigner();
                    const factory = new ethers.ContractFactory(contractArtifact.abi, contractArtifact.evm.bytecode.object, signer);
                    const contract = await factory.deploy();
                    outputDiv.innerText = "Deployment transaction sent. Waiting for confirmation...\nTx Hash: " + contract.deployTransaction.hash;
                    await contract.deployed();
                    outputDiv.innerText = "Contract deployed successfully!\nAddress: " + contract.address;
                  } catch (error) {
                    console.error("Deployment error:", error);
                    outputDiv.innerText = "Deployment failed: " + error.message;
                  }
                }

                document.getElementById("compileButton").addEventListener("click", compileContract);
                document.getElementById("deployButton").addEventListener("click", deployContract);
              </script>

              <p><b>Blockchain Network: </b>Polygon</p>
              <p><b>Consensus Mechanism: </b>Proof-of-Stake (PoS)</p>
              <p><b>Average Transaction Speed: </b>2000 - 4000 TPS</p>
              <p><b>Maximum Throughput: </b>7000 TPS</p>
              <br />
              <br />
              <br />
              <hr />
              <br />
              <h2>Smart Contract & Transaction Overview</h2>
              <br />
              <p><b>Smart Contract Status: </b>Not Deployed | Deployed</p>
              <br />
              <p><b>No. of Smart Contracts Deployed: </b><span> 1</span></p>
              <p><b>Smart Contract Address: </b><span>No data available yet.</span></p>
              <br />
              <p><b>No. of Vote Transactions: </b><span>7000</span></p>
              <p><b>Blockchain Link: </b>No data available yet.</p>
              <br />
              <p><b>Total No. of Blockchain Transactions: </b><span>7001</span></p>
            </div>
            <div class="right">
              <h2>Admin Wallet Information</h2>
              <br />
              <p><b>Network Type: </b>Amoy</p>
              <p><b>Username (Public Key): </b><span id="wallet-address-display">No data available yet.</span></p>
              <!-- Removed the private key display -->
              <div class="button-container">
                <button class="action-buttons edit-button" id="connect-wallet-button">Change Admin Wallet</button>
              </div>

              <script>
                async function connectWallet() {
                  if (typeof window.ethereum !== "undefined") {
                    try {
                      // Request connection from MetaMask
                      const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
                      const walletAddress = accounts[0];

                      // Update the UI with the connected wallet address
                      document.getElementById("wallet-address-display").textContent = walletAddress;

                      // Optionally prompt for a wallet name (you can skip or hardcode this)
                      let walletName = prompt("Enter a name for this wallet:", "Admin Wallet");
                      if (!walletName) walletName = "Admin Wallet";

                      // Send the wallet info to the backend to be stored
                      const response = await fetch("/api/wallet/update", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ walletAddress, walletName }),
                      });

                      const result = await response.json();
                      if (result.success) {
                        alert("Wallet connected and saved successfully!");
                      } else {
                        alert("Error saving wallet info: " + result.message);
                      }
                    } catch (error) {
                      console.error("Error connecting wallet:", error);
                      alert("Wallet connection failed. Check the console for details.");
                    }
                  } else {
                    alert("MetaMask is not installed. Please install MetaMask.");
                  }
                }

                // Attach the click event to the button
                document.getElementById("connect-wallet-button").addEventListener("click", connectWallet);
              </script>

              <br />
              <hr />
              <br />
              <h2>Fund Management</h2>
              <br />
              <p><b>Current Fund: </b><span>₱50,000</span></p>
              <br />
              <p><b>Total Deposit: </b><span>₱100,000</span></p>
              <p><b>Last Deposit Date: </b><span>February 18, 2025 - 5:05 PM</span></p>
              <br />
              <p><b>Total Expense: </b><span>₱50,000</span></p>
              <p><b>Last Expense Date: </b><span>February 18, 2025 - 5:05 PM</span></p>
              <br />
              <div class="button-container">
                <a href="">Fund Wallet on Binance</a>
              </div>
              <br />
              <p><b>Live Transaction Fee Estimate: </b><span>No data available yet.</span></p>
              <br />
              <p><b>Recommended Fund Estimate: </b><span>No data available yet.</span></p>
            </div>
          </div>
        </div>
      </main>
    </div>

    <footer class="footer">
      <div class="footer-left">
        <img src="img/calendar.png" class="footer-img" />
        <p id="datetime" data-date="<%= electionConfig.fakeCurrentDate %>"></p>
      </div>

      <div class="footer-center">
        <img src="img/copyright.png" class="footer-img" id="copyright-img" />
        <p>2025 - Fourmula 1</p>
      </div>

      <div class="footer-right">
        <img src="img/info.png" class="footer-img" id="info-img" />
        <p>Need help? Click&nbsp;</p>
        <a href="help_page">here.</a>
      </div>
    </footer>

    <script>
      function formatDate(isoString) {
        const date = new Date(isoString);
        const options = {
          month: "long",
          day: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        };
        return date.toLocaleString("en-US", options).replace(",", " -").toUpperCase();
      }

      function updateDateTime() {
        const datetimeElement = document.getElementById("datetime");
        if (!datetimeElement) return;

        // Get the initial time from the data attribute
        let currentTime = new Date(datetimeElement.getAttribute("data-date"));

        function update() {
          datetimeElement.textContent = formatDate(currentTime);
          currentTime.setMinutes(currentTime.getMinutes() + 1); // Increment by 1 minute
        }

        update(); // Set initial formatted date
        setInterval(update, 60000); // Update every minute (60000ms)
      }

      document.addEventListener("DOMContentLoaded", updateDateTime);
    </script>

    <script src="admin/js/sidebar.js"></script>
    <script src="admin/js/index-admin.js"></script>
    <script src="js/dropdown.js"></script>
  </body>
</html>
