<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>BulSU Voting System</title>

    <link rel="stylesheet" type="text/css" href="admin/css/index-admin.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/sidebar.css" />
    <link rel="stylesheet" type="text/css" href="admin/css/election-voter-info.css" />

    <!-- Boxicons CDN Link -->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link href="https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />

    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=upins:wght@400;700&display=swap" rel="stylesheet" />
  </head>

  <body>
    <%- include('header') %>

    <div class="content">
      <%- include('sidebar', { activeTab: 'election' }) %>
      <main class="main">
        <div class="title-container">
          <div class="r">
            <i class="fa-regular fa-address-card"></i>
            <h1 class="title">Voter Information</h1>
          </div>
        </div>
        <hr class="title-line" />
        <div class="main-header">
          <div class="main-header-title">
            <h1 class="brown">List of Registered Student Voters</h1>
          </div>
          <div class="group">
            <svg class="icon" aria-hidden="true" viewBox="0 0 24 24">
              <g>
                <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
              </g>
            </svg>
            <input placeholder="Search" type="search" class="input" />
          </div>
          <div class="main-header-options">
            <!-- <img src="../img/setting.png" class="option-filter" /> -->
            <img src="../img/printer.png" class="option-print" />
          </div>
        </div>

        <!-- New Filter Controls -->
        <div class="filter-controls" style="margin: 10px 0; padding: 5px; border: 1px solid #ccc">
          <label for="collegeFilter">Filter by College:</label>
          <select id="collegeFilter">
            <option value="all">All Colleges</option>
            <option value="College of Architecture and Fine Arts">College of Architecture and Fine Arts</option>
            <option value="College of Arts and Letters">College of Arts and Letters</option>
            <option value="College of Business Education and Accountancy">College of Business Education and Accountancy</option>
            <option value="College of Criminal Justice Education">College of Criminal Justice Education</option>
            <option value="College of Hospitality and Tourism Management">College of Hospitality and Tourism Management</option>
            <option value="College of Industrial Technology">College of Industrial Technology</option>
            <option value="College of Information and Communications Technology">College of Information and Communications Technology</option>
            <option value="College of Engineering">College of Engineering</option>
            <option value="College of Education">College of Education</option>
            <option value="CN">CN</option>
            <option value="College of Science">College of Science</option>
            <option value="College of Sports, Exercise, and Recreation">College of Sports, Exercise, and Recreation</option>
            <option value="College of Social Sciences and Philosophy">College of Social Sciences and Philosophy</option>
          </select>

          <label for="programFilter">Filter by Program:</label>
          <select id="programFilter" disabled>
            <option value="all">All Programs</option>
          </select>

          <label for="statusFilter">Filter by Status:</label>
          <select id="statusFilter">
            <option value="all">All</option>
            <option value="Registered">Registered</option>
            <option value="Voted">Voted</option>
            <!-- Add additional statuses as needed -->
          </select>
        </div>

        <br />

        <div class="main-content">
          <table id="studentTable">
            <thead>
              <tr>
                <th class="no">NO.</th>
                <th>NAME</th>
                <th>EMAIL</th>
                <th>STUDENT NO.</th>
                <th>CAMPUS</th>
                <th>COLLEGE</th>
                <th>PROGRAM</th>
                <th>STATUS</th>
              </tr>
            </thead>
            <tbody>
              <% if (voters.length > 0) { %> <% voters.forEach((voter, index) => { %>
              <tr>
                <td><%= index + 1 %></td>
                <td><%= voter.name %></td>
                <td><%= voter.email %></td>
                <td><%= voter.student_number %></td>
                <td><%= voter.campus %></td>
                <td><%= voter.college %></td>
                <td><%= voter.program %></td>
                <td><%= voter.status %></td>
              </tr>
              <% }); %> <% } else { %>
              <tr>
                <td colspan="8" style="text-align: center">No registered voters found.</td>
              </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </main>
    </div>

    <script>
      // Set how many rows per page
      const rowsPerPage = 100;
      let currentPage = 1;

      // Function to paginate table rows
      function paginateTable() {
        // Get all rows that are currently visible after filtering.
        const filteredRows = Array.from(document.querySelectorAll("#studentTable tbody tr")).filter((row) => row.style.display !== "none");

        const totalRows = filteredRows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);

        // Hide all filtered rows first
        filteredRows.forEach((row) => (row.style.display = "none"));

        // Calculate start and end indices for the current page.
        const start = (currentPage - 1) * rowsPerPage;
        const end = start + rowsPerPage;

        // Show only the rows for the current page.
        filteredRows.slice(start, end).forEach((row) => (row.style.display = ""));

        // Render pagination controls.
        renderPaginationControls(totalPages);
      }

      // Function to render pagination controls
      function renderPaginationControls(totalPages) {
        // Remove any existing controls.
        let paginationContainer = document.getElementById("paginationControls");
        if (!paginationContainer) {
          paginationContainer = document.createElement("div");
          paginationContainer.id = "paginationControls";
          paginationContainer.style.marginTop = "10px";
          document.querySelector(".main-content").appendChild(paginationContainer);
        }
        paginationContainer.innerHTML = "";

        // Create Previous button.
        const prevBtn = document.createElement("button");
        prevBtn.textContent = "Previous";
        prevBtn.disabled = currentPage === 1;
        prevBtn.addEventListener("click", () => {
          if (currentPage > 1) {
            currentPage--;
            paginateTable();
          }
        });
        paginationContainer.appendChild(prevBtn);

        // Create page number buttons (you can limit the number shown if desired).
        for (let i = 1; i <= totalPages; i++) {
          const btn = document.createElement("button");
          btn.textContent = i;
          btn.style.margin = "0 5px";
          if (i === currentPage) {
            btn.style.fontWeight = "bold";
          }
          btn.addEventListener("click", () => {
            currentPage = i;
            paginateTable();
          });
          paginationContainer.appendChild(btn);
        }

        // Create Next button.
        const nextBtn = document.createElement("button");
        nextBtn.textContent = "Next";
        nextBtn.disabled = currentPage === totalPages;
        nextBtn.addEventListener("click", () => {
          if (currentPage < totalPages) {
            currentPage++;
            paginateTable();
          }
        });
        paginationContainer.appendChild(nextBtn);
      }

      // Update filterTable to call paginateTable at the end.
      function filterTable() {
        const searchText = searchInput.value.toLowerCase();
        const selectedCollege = collegeFilter.value.toLowerCase();
        const selectedProgram = programFilter.value.toLowerCase();
        const selectedStatus = statusFilter.value.toLowerCase();

        for (let row of rows) {
          // Columns: 1: NAME, 2: EMAIL, 5: COLLEGE, 6: PROGRAM, 7: STATUS
          const name = row.cells[1].textContent.toLowerCase();
          const email = row.cells[2].textContent.toLowerCase();
          const college = row.cells[5].textContent.toLowerCase();
          const program = row.cells[6].textContent.toLowerCase();
          const status = row.cells[7].textContent.toLowerCase();

          const matchesSearch = name.includes(searchText) || email.includes(searchText);
          const matchesCollege = selectedCollege === "all" || college.includes(selectedCollege);
          const matchesProgram = selectedProgram === "all" || program.includes(selectedProgram);
          const matchesStatus = selectedStatus === "all" || status === selectedStatus;

          // Set display based on filter; temporarily show all that match.
          row.style.display = matchesSearch && matchesCollege && matchesProgram && matchesStatus ? "" : "none";
        }
        // Reset current page and paginate after filtering.
        currentPage = 1;
        paginateTable();
      }

      // Update event listeners to call filterTable (which in turn paginates)
      searchInput.addEventListener("input", filterTable);
      collegeFilter.addEventListener("change", function () {
        updateProgramDropdown();
        filterTable();
      });
      programFilter.addEventListener("change", filterTable);
      statusFilter.addEventListener("change", filterTable);

      // Run pagination initially in case there is preexisting filter
      document.addEventListener("DOMContentLoaded", function () {
        paginateTable();
      });
    </script>

    <%- include('footer') %>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.querySelector(".input");
        const table = document.getElementById("studentTable");
        const rows = table.querySelectorAll("tbody tr");

        searchInput.addEventListener("input", function () {
          const filter = searchInput.value.toLowerCase();
          rows.forEach((row) => {
            // Assuming the "NAME" column is the second cell (index 1)
            const nameCell = row.cells[1].textContent.toLowerCase();
            if (nameCell.indexOf(filter) > -1) {
              row.style.display = "";
            } else {
              row.style.display = "none";
            }
          });
        });
      });
    </script>

    <script src="admin/js/sidebar.js"></script>
    <script src="admin/js/index-admin.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Print button functionality using jsPDF and autoTable.
        const printButton = document.querySelector(".option-print");
        printButton.addEventListener("click", function () {
          console.log("clicked");
          // Use the jsPDF module from the window
          const { jsPDF } = window.jspdf;
          const doc = new jsPDF("p", "pt");

          // Optionally add a title
          doc.setFontSize(18);
          doc.text("Registered Student Voters", 40, 40);

          // Use autoTable plugin; the table element is your table with id "studentTable"
          doc.autoTable({
            html: "#studentTable",
            startY: 60,
            theme: "grid", // You can change the theme
            headStyles: { fillColor: [41, 128, 185] },
            styles: { fontSize: 10 },
          });

          // Save or open the PDF in a new window.
          doc.save("voters.pdf");
        });
      });
    </script>
  </body>
</html>
